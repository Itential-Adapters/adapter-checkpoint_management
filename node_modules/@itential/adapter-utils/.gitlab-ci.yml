# Guide: https://docs.gitlab.com/ce/ci/yaml/README.html
# Only use spaces to indent your .yml configuration.
# -----

image: registry.gitlab.com/itential/devops/docker/itential-ci

variables:
  DOCKER_DRIVER: overlay2

services:
  - docker:dind

after_script:
  - rm -rf ~/.ssh

stages:
  # Lint code, test code quality, and ensure there are no insecure dependencies
  - quality
  # Run unit and integration test suites
  - test
  # publish module to npm, deploy docker registry image
  - deploy
  # run blackduck scans on final product
  - scan

lint:
  stage: quality
  script:
    - npm_setup
    - npm run lint

codequality:
  stage: quality
  allow_failure: true
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    paths: [gl-code-quality-report.json]

security:
  stage: quality
  script:
    - npm_setup
    # vulnerability check Node Security Platform (https://nodesecurity.io/)
    - npm audit --registry=https://registry.npmjs.org || true

unit:
  stage: test
  script:
    - npm_setup
    - npm run test:unit

integration:
  stage: test
  script:
    - npm_setup
    - npm run test:integration

prerelease:
  stage: deploy
  only:
    - /(major\/)/
  script:
    - npm_setup
    - prerelease

publish:
  stage: deploy
  only:
    - master
    - /(release\/)/
  script:
    - npm_setup
    - deploy

blackduck:
  stage: scan
  image: registry.gitlab.com/itential/devops/docker/scanner-ci
  only:
    - master
    - /(release\/)/
  script:
    # run blackduck scan (results available at https://blackduck.aws.itential.com)
    - bash hub-detect --blackduck.hub.url=$BLACKDUCK_URL --blackduck.hub.username=$BLACKDUCK_USERNAME --blackduck.hub.password=$BLACKDUCK_PASS
