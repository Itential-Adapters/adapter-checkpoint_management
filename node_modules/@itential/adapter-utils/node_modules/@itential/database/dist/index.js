!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var o=t();for(var n in o)("object"==typeof exports?exports:e)[n]=o[n]}}(global,function(){return function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=1)}([function(e,t){e.exports=require("mongodb")},function(e,t,o){const{Binary:n,Code:r,Map:i,DBRef:s,Double:c,Int32:a,Long:l,MinKey:u,MaxKey:d,ObjectID:h,ObjectId:b,Symbol:f,Timestamp:g,BSONRegExp:p,Decimal128:m,MongoError:S,MongoNetworkError:y}=o(0),w=o(2);e.exports={MongoDBConnection:w,Binary:n,Code:r,Map:i,DBRef:s,Double:c,Int32:a,Long:l,MinKey:u,MaxKey:d,ObjectID:h,ObjectId:b,Symbol:f,Timestamp:g,BSONRegExp:p,Decimal128:m,MongoError:S,MongoNetworkError:y}},function(e,t,o){const n=o(3),r=o(4),{MongoClient:i}=o(0),{EventEmitter:s}=o(5),c=o(6);class a{constructor(e){this.initialize(e)}resolveMongoError(e){if(e&&e.code)switch(e.code){case"13":case 13:return"User unauthorized to perform the requested action: ";case"18":case 18:return`User Authentication failed.  Username/Password combination is incorrect ${e}`}return e}initialize(e){this.url=e.url,this.connectionObj=c.parseConnectionString(this.url),this.dbName=e.db,this.connectionObj.database=this.dbName,this.dbAuthEnabled=!1,this.dbUsername="pronghorn",this.dbPassword="pronghorn",this.dbAuthSource="admin";let t=!1,o=!1,r=!1,i=null;if(e.ssl)if(!0===e.ssl.enabled){if(log.trace("Connecting to MongoDB with SSL."),t=!0,!1===e.ssl.acceptInvalidCerts)if(o=!0,log.trace("Certificate based SSL MongoDB connections will be used."),e.ssl.sslCA)try{i=[n.readFileSync(e.ssl.sslCA)]}catch(e){log.error(`Error: Unable to load Mongo CA file: ${e}`)}else log.trace("Error: Certificate validation is enabled but a CA is not specified.");else log.trace("SSL MongoDB connection without CA certificate validation.");!0===e.ssl.checkServerIdentity?r=!0:log.trace("WARNING: Skipping server identity validation")}else log.trace("WARNING: Connecting to MongoDB without SSL.");else log.trace("WARNING: Connecting to MongoDB without SSL.");e.credentials?(!0===e.credentials.dbAuth?this.dbAuthEnabled=!0:log.trace("WARNING: Connecting to MongoDB without user authentication."),e.credentials.dbAuthSource?this.dbAuthSource=e.credentials.dbAuthSource:this.dbAuthSource=this.dbName,e.credentials.user?this.dbUsername=e.credentials.user:log.trace("Using default mongo username"),e.credentials.passwd?this.dbPassword=e.credentials.passwd:log.trace("Using default mongo password"),!this.dbAuthEnabled||null!==this.dbUsername&&null!==this.dbPassword||log.error("ERROR: Database authentication is configured but username or password is not provided")):log.trace("WARNING: Connecting to MongoDB without user authentication.");const s={reconnectTries:2e3,reconnectInterval:1e3,ssl:t,sslValidate:o,checkServerIdentity:r,useNewUrlParser:!0};!0===o&&(s.sslCA=i),this.options=s,this.dbAuthEnabled&&(this.connectionObj.username=this.dbUsername,this.connectionObj.password=this.dbPassword,this.connectionObj.options.authSource=this.dbAuthSource),this.url=c.generateConnectionString(this.connectionObj),log.trace(`Connecting to MongoDB with options ${JSON.stringify(this.options)}`)}closeConnection(){this.connection&&this.connection.close&&this.connection.close()}connect(e){return new Promise((t,o)=>{if(!e)return t(null);i.connect(this.url,this.options,(e,n)=>e?o(this.resolveMongoError(e)):(n.on("authenticated",e=>{this.emit("authenticated",e)}),n.on("close",e=>{this.emit("close",e)}),n.on("error",e=>{this.emit("error",e)}),n.on("fullsetup",e=>{this.emit("fullsetup",e)}),n.on("parseError",e=>{this.emit("parseError",e)}),n.on("reconnect",e=>{this.emit("reconnect",e)}),n.on("timeout",e=>{this.emit("timeout",e)}),this.db=n.db(this.dbName),this.connection=n,t(this.db)))})}}r.inherits(a,s),e.exports=a},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("util")},function(e,t){e.exports=require("events")},function(e,t,o){const n=o(7);e.exports=class{static generateConnectionString(e){return n.format(e)}static parseConnectionString(e){const t={scheme:"mongodb",hosts:[{host:"localhost",port:27017}],database:"",options:{}};let o=t;try{(o=n.parse(e)).options=o.options||{}}catch(e){o=t,log.warn(`An error occurred while parsing the supplied Connection String. The default connection string will be used. Error is ${e}`)}return o}}},function(e,t){e.exports=require("mongodb-uri")}])});
//# sourceMappingURL=index.js.map