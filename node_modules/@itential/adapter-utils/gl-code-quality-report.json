[{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Function `getToken` has 5 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"08bed778811c7bed2c5857a9ce109015","location":{"path":"lib/connectorRest.js","lines":{"begin":517,"end":517}},"other_locations":[],"remediation_points":375000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Function `getTokenItem` has 5 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"1b655dbd2a7ea161beb835cbecfe8de3","location":{"path":"lib/connectorRest.js","lines":{"begin":987,"end":987}},"other_locations":[],"remediation_points":375000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Function `requestAuthenticate` has 5 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"67cc7f8056ce76817ebf0aedef4fd63d","location":{"path":"lib/connectorRest.js","lines":{"begin":1128,"end":1128}},"other_locations":[],"remediation_points":375000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Function `handleEndThrottleResponse` has 8 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"aa9a6002019e5f7806c9dae98ad49bce","location":{"path":"lib/connectorRest.js","lines":{"begin":1320,"end":1320}},"other_locations":[],"remediation_points":600000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Function `retryInvalidResponse` has 11 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"79f0e25a04ece9c1c5e822c8b1a0bafc","location":{"path":"lib/connectorRest.js","lines":{"begin":1397,"end":1397}},"other_locations":[],"remediation_points":825000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Function `handleInvalidToken` has 11 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"3dbf020ee1a1052c3c4a3c6a32aa9bf4","location":{"path":"lib/connectorRest.js","lines":{"begin":1468,"end":1468}},"other_locations":[],"remediation_points":825000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Function `handleLimitResponse` has 11 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"84e3ce2e4512f33cd0a4ba00c5d9d092","location":{"path":"lib/connectorRest.js","lines":{"begin":1490,"end":1490}},"other_locations":[],"remediation_points":825000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Function `handleAbortResponse` has 11 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"0b3bfbc306f06cf325bc32421b6c7d6a","location":{"path":"lib/connectorRest.js","lines":{"begin":1524,"end":1524}},"other_locations":[],"remediation_points":825000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Function `noQueueRequest` has 5 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"c2370ac98d2b3036a5e7243422aafd7e","location":{"path":"lib/connectorRest.js","lines":{"begin":1554,"end":1554}},"other_locations":[],"remediation_points":375000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Function `queueThrottleRequest` has 7 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"b6aefe5bb404b9ad6a73ca15c45057e8","location":{"path":"lib/connectorRest.js","lines":{"begin":1602,"end":1602}},"other_locations":[],"remediation_points":525000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"file_lines","content":{"body":""},"description":"File `connectorRest.js` has 1583 lines of code (exceeds 250 allowed). Consider refactoring.","fingerprint":"5e19bfd2b0f8bf953c21fe7a3b4beed6","location":{"path":"lib/connectorRest.js","lines":{"begin":1,"end":2366}},"other_locations":[],"remediation_points":20395200,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `returnStub` has a Cognitive Complexity of 53 (exceeds 5 allowed). Consider refactoring.","fingerprint":"b91cff801bce68981227f8dbc64d8a68","location":{"path":"lib/connectorRest.js","lines":{"begin":219,"end":335}},"other_locations":[],"remediation_points":4950000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `makeRequest` has a Cognitive Complexity of 11 (exceeds 5 allowed). Consider refactoring.","fingerprint":"41a552a567587ea86de0eeb7af13a5fe","location":{"path":"lib/connectorRest.js","lines":{"begin":340,"end":439}},"other_locations":[],"remediation_points":750000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `findTokenInResult` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring.","fingerprint":"d0a8ca76904d737710af3d176f0169c6","location":{"path":"lib/connectorRest.js","lines":{"begin":444,"end":475}},"other_locations":[],"remediation_points":550000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `findExpireInResult` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.","fingerprint":"a300a785feee94318d63d1ab1c060bf0","location":{"path":"lib/connectorRest.js","lines":{"begin":480,"end":511}},"other_locations":[],"remediation_points":450000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `getToken` has a Cognitive Complexity of 12 (exceeds 5 allowed). Consider refactoring.","fingerprint":"5b6ca95be26e7d2f26e0309859e92294","location":{"path":"lib/connectorRest.js","lines":{"begin":517,"end":630}},"other_locations":[],"remediation_points":850000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `buildTokenRequest` has a Cognitive Complexity of 73 (exceeds 5 allowed). Consider refactoring.","fingerprint":"0689ec1b4e635a725ac4d6240a673ae1","location":{"path":"lib/connectorRest.js","lines":{"begin":635,"end":868}},"other_locations":[],"remediation_points":6950000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `validToken` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring.","fingerprint":"e393ab37e157ba9c6bf3c68d58c9f3b0","location":{"path":"lib/connectorRest.js","lines":{"begin":918,"end":981}},"other_locations":[],"remediation_points":550000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `addAuthToRequest` has a Cognitive Complexity of 16 (exceeds 5 allowed). Consider refactoring.","fingerprint":"07cfb108770b7365260b6e39e83ac19a","location":{"path":"lib/connectorRest.js","lines":{"begin":1052,"end":1122}},"other_locations":[],"remediation_points":1250000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `requestAuthenticate` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.","fingerprint":"fa09f5d890c8be993048a2b0087e77ef","location":{"path":"lib/connectorRest.js","lines":{"begin":1128,"end":1220}},"other_locations":[],"remediation_points":250000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `refreshProperties` has a Cognitive Complexity of 77 (exceeds 5 allowed). Consider refactoring.","fingerprint":"aa4629c338368d07a67f05bc8cfbc126","location":{"path":"lib/connectorRest.js","lines":{"begin":1717,"end":1932}},"other_locations":[],"remediation_points":7350000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `connect` has a Cognitive Complexity of 15 (exceeds 5 allowed). Consider refactoring.","fingerprint":"12e28856ff403e08d74f70e46a6c47bc","location":{"path":"lib/connectorRest.js","lines":{"begin":1941,"end":2044}},"other_locations":[],"remediation_points":1150000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `healthCheck` has a Cognitive Complexity of 28 (exceeds 5 allowed). Consider refactoring.","fingerprint":"f52cdccb6f876045ff8dea72e6bbc8ec","location":{"path":"lib/connectorRest.js","lines":{"begin":2058,"end":2194}},"other_locations":[],"remediation_points":2450000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `performRequest` has a Cognitive Complexity of 24 (exceeds 5 allowed). Consider refactoring.","fingerprint":"10330b8e7f296b83f22805e61bfbcb2d","location":{"path":"lib/connectorRest.js","lines":{"begin":2207,"end":2338}},"other_locations":[],"remediation_points":2050000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `waitForSystem` has 58 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"11461b24fdcea143d8d1dd32e0da680a","location":{"path":"lib/connectorRest.js","lines":{"begin":137,"end":214}},"other_locations":[],"remediation_points":1392000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `intervalObject` has 38 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"4bec239888cf2288f4e8d5ef078d2829","location":{"path":"lib/connectorRest.js","lines":{"begin":161,"end":210}},"other_locations":[],"remediation_points":912000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `returnStub` has 85 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"3b7ba3a329ac4b9b7945195ee02b9fc8","location":{"path":"lib/connectorRest.js","lines":{"begin":219,"end":335}},"other_locations":[],"remediation_points":2040000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `makeRequest` has 71 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"a648e3cabd88ecdc1b77ecd3605d486a","location":{"path":"lib/connectorRest.js","lines":{"begin":340,"end":439}},"other_locations":[],"remediation_points":1704000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `getToken` has 68 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"c3d3600ff68f11d22eafe54ae234d7ab","location":{"path":"lib/connectorRest.js","lines":{"begin":517,"end":630}},"other_locations":[],"remediation_points":1632000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `buildTokenRequest` has 153 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"afd157ed003cee1ca4e9b2062dedcd9b","location":{"path":"lib/connectorRest.js","lines":{"begin":635,"end":868}},"other_locations":[],"remediation_points":3672000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `addTokenItem` has 26 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"752bdd8a4f3a3ee413511731ff8fe271","location":{"path":"lib/connectorRest.js","lines":{"begin":874,"end":912}},"other_locations":[],"remediation_points":624000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `validToken` has 42 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"a8c5699b7b3f6488bde68ef4e9484850","location":{"path":"lib/connectorRest.js","lines":{"begin":918,"end":981}},"other_locations":[],"remediation_points":1008000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `getTokenItem` has 44 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"376ed02629c6014248d22260e3ba8b4b","location":{"path":"lib/connectorRest.js","lines":{"begin":987,"end":1046}},"other_locations":[],"remediation_points":1056000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `addAuthToRequest` has 41 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"215c39357949735109cd9ed234c7c870","location":{"path":"lib/connectorRest.js","lines":{"begin":1052,"end":1122}},"other_locations":[],"remediation_points":984000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `requestAuthenticate` has 62 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"8a2e6a004971160834a60bc4c289091e","location":{"path":"lib/connectorRest.js","lines":{"begin":1128,"end":1220}},"other_locations":[],"remediation_points":1488000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `handleEndResponse` has 42 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"23f2939c4fa4e97434bdf71025890e8b","location":{"path":"lib/connectorRest.js","lines":{"begin":1259,"end":1314}},"other_locations":[],"remediation_points":1008000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `handleEndThrottleResponse` has 56 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"b5ebcbff3f32408191bf8b6fbd055b34","location":{"path":"lib/connectorRest.js","lines":{"begin":1320,"end":1391}},"other_locations":[],"remediation_points":1344000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `retryInvalidResponse` has 44 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"de4a5042a6eafec650dbdb7d5a0ca58c","location":{"path":"lib/connectorRest.js","lines":{"begin":1397,"end":1463}},"other_locations":[],"remediation_points":1056000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `noQueueRequest` has 26 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"0ca9c60480d5aa35e6aea65d8126f78e","location":{"path":"lib/connectorRest.js","lines":{"begin":1554,"end":1592}},"other_locations":[],"remediation_points":624000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `queueThrottleRequest` has 43 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"198a8e0bac9e35042f540b54cc2b9e43","location":{"path":"lib/connectorRest.js","lines":{"begin":1602,"end":1665}},"other_locations":[],"remediation_points":1032000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `refreshProperties` has 137 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"7ef40bee4e619e65efd4efaf0bc0dffd","location":{"path":"lib/connectorRest.js","lines":{"begin":1717,"end":1932}},"other_locations":[],"remediation_points":3288000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `connect` has 88 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"125a814bf9fac311de23c22d97d40527","location":{"path":"lib/connectorRest.js","lines":{"begin":1941,"end":2044}},"other_locations":[],"remediation_points":2112000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `healthCheck` has 97 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"a1e3308f05b8db2b3b9b4bfdaeb22954","location":{"path":"lib/connectorRest.js","lines":{"begin":2058,"end":2194}},"other_locations":[],"remediation_points":2328000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `performRequest` has 99 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"a501078d472a58d85b01dfd8ffd064bc","location":{"path":"lib/connectorRest.js","lines":{"begin":2207,"end":2338}},"other_locations":[],"remediation_points":2376000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"nested_control_flow","content":{"body":""},"description":"Avoid deeply nested control flow statements.","location":{"path":"lib/connectorRest.js","lines":{"begin":181,"end":191}},"other_locations":[],"remediation_points":450000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"8beafd371873a18bfecc9fc948dfc7fb"},{"categories":["Complexity"],"check_name":"nested_control_flow","content":{"body":""},"description":"Avoid deeply nested control flow statements.","location":{"path":"lib/connectorRest.js","lines":{"begin":192,"end":203}},"other_locations":[],"remediation_points":450000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"64c18a9ccf466edc9e908995d5a1b8f1"},{"categories":["Complexity"],"check_name":"nested_control_flow","content":{"body":""},"description":"Avoid deeply nested control flow statements.","location":{"path":"lib/connectorRest.js","lines":{"begin":270,"end":284}},"other_locations":[],"remediation_points":450000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"b0dcab544be199b42f578cc0c39aafff"},{"categories":["Complexity"],"check_name":"nested_control_flow","content":{"body":""},"description":"Avoid deeply nested control flow statements.","location":{"path":"lib/connectorRest.js","lines":{"begin":288,"end":314}},"other_locations":[],"remediation_points":450000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"26a4fa782acfb67f2202010d17d7ecf0"},{"categories":["Complexity"],"check_name":"nested_control_flow","content":{"body":""},"description":"Avoid deeply nested control flow statements.","location":{"path":"lib/connectorRest.js","lines":{"begin":1436,"end":1438}},"other_locations":[],"remediation_points":450000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"927d74033cfc9107d62b34a62d25fb0d"},{"categories":["Complexity"],"check_name":"nested_control_flow","content":{"body":""},"description":"Avoid deeply nested control flow statements.","location":{"path":"lib/connectorRest.js","lines":{"begin":1448,"end":1450}},"other_locations":[],"remediation_points":450000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"927d74033cfc9107d62b34a62d25fb0d"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":334,"end":334}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"f5c7a86a4dd9e79bfdd3a7d8320495ed"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":569,"end":624}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"57544e13ef6e55b14595f6fafef0aa94"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":623,"end":623}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"a6e6ca074359d85a26b5f58ea415ec43"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":628,"end":628}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"6690a03b0dc2230832ac4b561500dbdb"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":866,"end":866}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"6690a03b0dc2230832ac4b561500dbdb"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":1214,"end":1214}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"3688ec6e2ef69240870b4a31abe4e0c3"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":1218,"end":1218}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"6690a03b0dc2230832ac4b561500dbdb"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":1426,"end":1426}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"a84e79b6b839e2ad63a578eeb3b83746"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":1430,"end":1430}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"d96b7afaf182c277fbf7e879acbe1dbd"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":1437,"end":1437}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"78c0289c23b47039d7526d21dca2f711"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":1440,"end":1440}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"a84e79b6b839e2ad63a578eeb3b83746"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":1444,"end":1444}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"2ed3911bd72cbf59827627dbc77d7812"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":1449,"end":1449}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"78c0289c23b47039d7526d21dca2f711"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":1452,"end":1452}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"a84e79b6b839e2ad63a578eeb3b83746"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":1456,"end":1456}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"367cfa689d9cbec6b645a003df89fa2e"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":1585,"end":1585}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"3d1c02ae90724a7f44ba53e8582f73c3"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":1656,"end":1656}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"2f723d26444f98a550459452925916af"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":2000,"end":2000}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"e230b72a76e90676944e25d729f06975"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":2006,"end":2006}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"e230b72a76e90676944e25d729f06975"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":2009,"end":2009}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"fd2eccc7fb737466ffbe7103badce0d3"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":2030,"end":2030}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"e230b72a76e90676944e25d729f06975"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":2034,"end":2034}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"e230b72a76e90676944e25d729f06975"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":2040,"end":2040}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"e230b72a76e90676944e25d729f06975"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":2043,"end":2043}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"fd2eccc7fb737466ffbe7103badce0d3"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":2314,"end":2314}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"2b35ced3c42e9de5717ea3f1d23da9f5"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":2321,"end":2332}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"4cdab59693620f47e7fa7b82d93cde8d"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/connectorRest.js","lines":{"begin":2336,"end":2336}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"6690a03b0dc2230832ac4b561500dbdb"},{"categories":["Complexity"],"check_name":"file_lines","content":{"body":""},"description":"File `propertyUtil.js` has 286 lines of code (exceeds 250 allowed). Consider refactoring.","fingerprint":"815e21e080819d4c7fd364309c40efa8","location":{"path":"lib/propertyUtil.js","lines":{"begin":1,"end":501}},"other_locations":[],"remediation_points":1718400,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `getEntitySchema` has a Cognitive Complexity of 60 (exceeds 5 allowed). Consider refactoring.","fingerprint":"1b7e59622c70f28c5f187c495358f3da","location":{"path":"lib/propertyUtil.js","lines":{"begin":34,"end":325}},"other_locations":[],"remediation_points":5650000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `setDefaults` has a Cognitive Complexity of 10 (exceeds 5 allowed). Consider refactoring.","fingerprint":"99e76b394c8da41061b83574a0f37e2b","location":{"path":"lib/propertyUtil.js","lines":{"begin":336,"end":371}},"other_locations":[],"remediation_points":650000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `mergeProperties` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.","fingerprint":"e181ff5a5273b7d98a405bcfe1853cf5","location":{"path":"lib/propertyUtil.js","lines":{"begin":383,"end":414}},"other_locations":[],"remediation_points":450000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `getEntitySchema` has 187 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"fd7c1c6ac61163c169640fcd4b745871","location":{"path":"lib/propertyUtil.js","lines":{"begin":34,"end":325}},"other_locations":[],"remediation_points":4488000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"nested_control_flow","content":{"body":""},"description":"Avoid deeply nested control flow statements.","location":{"path":"lib/propertyUtil.js","lines":{"begin":273,"end":287}},"other_locations":[],"remediation_points":450000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"b9824fe1a47eda5a960819411c10d993"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/propertyUtil.js","lines":{"begin":449,"end":449}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"1eae68a45582b9e3027ef50fd1473454"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/propertyUtil.js","lines":{"begin":452,"end":452}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"06f027fff3ed6e2a7e3c4222472e82dd"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/propertyUtil.js","lines":{"begin":495,"end":495}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"06f027fff3ed6e2a7e3c4222472e82dd"},{"categories":["Complexity"],"check_name":"file_lines","content":{"body":""},"description":"File `requestHandler.js` has 460 lines of code (exceeds 250 allowed). Consider refactoring.","fingerprint":"261e5471fcc3d8d048790e6acb1ab40c","location":{"path":"lib/requestHandler.js","lines":{"begin":1,"end":838}},"other_locations":[],"remediation_points":4224000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `walkThroughActionFiles` has a Cognitive Complexity of 19 (exceeds 5 allowed). Consider refactoring.","fingerprint":"ec3cf2c6038fe072bd4746ac32037e5d","location":{"path":"lib/requestHandler.js","lines":{"begin":100,"end":158}},"other_locations":[],"remediation_points":1550000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `isEntityCached` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring.","fingerprint":"c1d5f7da556a63789a4ddd1046e21737","location":{"path":"lib/requestHandler.js","lines":{"begin":172,"end":210}},"other_locations":[],"remediation_points":1050000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `identifyRequest` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.","fingerprint":"3b1d1b8d44322cfc351fb619e88022f7","location":{"path":"lib/requestHandler.js","lines":{"begin":343,"end":385}},"other_locations":[],"remediation_points":250000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `setFailover` has a Cognitive Complexity of 12 (exceeds 5 allowed). Consider refactoring.","fingerprint":"483f1f354810e55d7e8a6ddc70a9d59f","location":{"path":"lib/requestHandler.js","lines":{"begin":530,"end":558}},"other_locations":[],"remediation_points":850000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `verifyCapability` has a Cognitive Complexity of 41 (exceeds 5 allowed). Consider refactoring.","fingerprint":"725619c2cd4e88173d07a43dcb3d1336","location":{"path":"lib/requestHandler.js","lines":{"begin":700,"end":779}},"other_locations":[],"remediation_points":3750000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `getAllCapabilities` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.","fingerprint":"0036ba07edc24e5b11a8fd900713fe39","location":{"path":"lib/requestHandler.js","lines":{"begin":789,"end":834}},"other_locations":[],"remediation_points":450000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `validateProperties` has 28 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"ca914caaea32e5dc5ed58739182e5a55","location":{"path":"lib/requestHandler.js","lines":{"begin":45,"end":91}},"other_locations":[],"remediation_points":672000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `walkThroughActionFiles` has 40 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"78347d55c8c9e0e26549e4ee4c870b5a","location":{"path":"lib/requestHandler.js","lines":{"begin":100,"end":158}},"other_locations":[],"remediation_points":960000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `isEntityCached` has 26 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"cc113fb4cb7d4688ce200f8be3d74bd2","location":{"path":"lib/requestHandler.js","lines":{"begin":172,"end":210}},"other_locations":[],"remediation_points":624000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `identifyRequest` has 30 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"5527da808bc56242a2c4c3da3f27c179","location":{"path":"lib/requestHandler.js","lines":{"begin":343,"end":385}},"other_locations":[],"remediation_points":720000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `addEntityCache` has 49 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"5dc50c5cf05fd8a9cebcc5a5a3688655","location":{"path":"lib/requestHandler.js","lines":{"begin":616,"end":683}},"other_locations":[],"remediation_points":1176000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `verifyCapability` has 54 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"ae09031e4830adb82e5e9773852b3531","location":{"path":"lib/requestHandler.js","lines":{"begin":700,"end":779}},"other_locations":[],"remediation_points":1296000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `getAllCapabilities` has 31 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"c2a00ced795cffb53dce99c27c7f3fd7","location":{"path":"lib/requestHandler.js","lines":{"begin":789,"end":834}},"other_locations":[],"remediation_points":744000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"nested_control_flow","content":{"body":""},"description":"Avoid deeply nested control flow statements.","location":{"path":"lib/requestHandler.js","lines":{"begin":137,"end":142}},"other_locations":[],"remediation_points":450000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"719193299fc2c38c1c941342bbc61c84"},{"categories":["Complexity"],"check_name":"nested_control_flow","content":{"body":""},"description":"Avoid deeply nested control flow statements.","location":{"path":"lib/requestHandler.js","lines":{"begin":736,"end":742}},"other_locations":[],"remediation_points":450000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"44c3c9d86d32deee1d6f02cc7e2176e1"},{"categories":["Complexity"],"check_name":"nested_control_flow","content":{"body":""},"description":"Avoid deeply nested control flow statements.","location":{"path":"lib/requestHandler.js","lines":{"begin":751,"end":753}},"other_locations":[],"remediation_points":450000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"efc6010ca082f194702fcf1e6e895300"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/requestHandler.js","lines":{"begin":379,"end":379}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"80590d9431cba69bf0105fe459fd82cb"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/requestHandler.js","lines":{"begin":383,"end":383}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"80590d9431cba69bf0105fe459fd82cb"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/requestHandler.js","lines":{"begin":741,"end":741}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"3ce38ac9d477a6504484aafa178a5211"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/requestHandler.js","lines":{"begin":755,"end":755}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"41070401e27262cdd36ee8a12df3b7b7"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/requestHandler.js","lines":{"begin":759,"end":759}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"876b829252d37e734eeb8c3e30355158"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/requestHandler.js","lines":{"begin":774,"end":774}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"41070401e27262cdd36ee8a12df3b7b7"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/requestHandler.js","lines":{"begin":777,"end":777}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"876b829252d37e734eeb8c3e30355158"},{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Function `buildRequestPath` has 7 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"8056a50c13eae362b6456ad04b4d84ca","location":{"path":"lib/restHandler.js","lines":{"begin":203,"end":203}},"other_locations":[],"remediation_points":525000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"file_lines","content":{"body":""},"description":"File `restHandler.js` has 543 lines of code (exceeds 250 allowed). Consider refactoring.","fingerprint":"6e340b2543db6cf8a68914ec510d070b","location":{"path":"lib/restHandler.js","lines":{"begin":1,"end":892}},"other_locations":[],"remediation_points":5419200,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `buildRequestPath` has a Cognitive Complexity of 62 (exceeds 5 allowed). Consider refactoring.","fingerprint":"5192e5b61893eb9f8ff6d8560ce96070","location":{"path":"lib/restHandler.js","lines":{"begin":203,"end":430}},"other_locations":[],"remediation_points":5850000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `mergeHeaders` has a Cognitive Complexity of 30 (exceeds 5 allowed). Consider refactoring.","fingerprint":"e2936cdec2894de3d0bf6eb372cfe800","location":{"path":"lib/restHandler.js","lines":{"begin":441,"end":507}},"other_locations":[],"remediation_points":2650000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `buildPayload` has a Cognitive Complexity of 13 (exceeds 5 allowed). Consider refactoring.","fingerprint":"4243bf5f33909fdd689df47e4f9fc0e3","location":{"path":"lib/restHandler.js","lines":{"begin":520,"end":576}},"other_locations":[],"remediation_points":950000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `genericRestRequest` has a Cognitive Complexity of 24 (exceeds 5 allowed). Consider refactoring.","fingerprint":"65fdcc4ce46d8274f636c85ee4fe6118","location":{"path":"lib/restHandler.js","lines":{"begin":639,"end":760}},"other_locations":[],"remediation_points":2050000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `healthcheckRest` has a Cognitive Complexity of 23 (exceeds 5 allowed). Consider refactoring.","fingerprint":"067cb4134f8eac7bfe37c3a23a516e86","location":{"path":"lib/restHandler.js","lines":{"begin":773,"end":869}},"other_locations":[],"remediation_points":1950000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `handleRestRequest` has 109 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"81868d832f0a0a37fc793d63bce56711","location":{"path":"lib/restHandler.js","lines":{"begin":30,"end":189}},"other_locations":[],"remediation_points":2616000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `buildRequestPath` has 138 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"49d0ce05cebb45264c4ae319d501683d","location":{"path":"lib/restHandler.js","lines":{"begin":203,"end":430}},"other_locations":[],"remediation_points":3312000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `mergeHeaders` has 46 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"245a02ce5512fe5ae5eab88bc940e3d2","location":{"path":"lib/restHandler.js","lines":{"begin":441,"end":507}},"other_locations":[],"remediation_points":1104000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `buildPayload` has 38 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"b8c854952951b11cb095cec936679d6e","location":{"path":"lib/restHandler.js","lines":{"begin":520,"end":576}},"other_locations":[],"remediation_points":912000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `genericRestRequest` has 91 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"8b2e1b7b2ad57f63387fe0b6c461ef84","location":{"path":"lib/restHandler.js","lines":{"begin":639,"end":760}},"other_locations":[],"remediation_points":2184000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `healthcheckRest` has 69 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"689ad3ef9fd2e6ea0c4b0c5800804794","location":{"path":"lib/restHandler.js","lines":{"begin":773,"end":869}},"other_locations":[],"remediation_points":1656000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"nested_control_flow","content":{"body":""},"description":"Avoid deeply nested control flow statements.","location":{"path":"lib/restHandler.js","lines":{"begin":88,"end":103}},"other_locations":[],"remediation_points":450000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"5654baf18feb496442a23f96c31853b3"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/restHandler.js","lines":{"begin":132,"end":132}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"8726800809c9053482eafd14dc80ea36"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/restHandler.js","lines":{"begin":138,"end":138}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"8726800809c9053482eafd14dc80ea36"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/restHandler.js","lines":{"begin":148,"end":148}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"8726800809c9053482eafd14dc80ea36"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/restHandler.js","lines":{"begin":170,"end":170}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"8726800809c9053482eafd14dc80ea36"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/restHandler.js","lines":{"begin":175,"end":175}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"8726800809c9053482eafd14dc80ea36"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/restHandler.js","lines":{"begin":672,"end":672}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"63302dc6c92342cadd6c7f610a695d4b"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/restHandler.js","lines":{"begin":748,"end":748}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"90ab6091e963a1b69ff74005b2a1a6b6"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/restHandler.js","lines":{"begin":751,"end":751}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"430406b861fcf89eb4539f2f412cd409"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/restHandler.js","lines":{"begin":754,"end":754}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"9297afa4f74b8595b60d6b12adef8804"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/restHandler.js","lines":{"begin":758,"end":758}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"63302dc6c92342cadd6c7f610a695d4b"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/restHandler.js","lines":{"begin":867,"end":867}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"63302dc6c92342cadd6c7f610a695d4b"},{"categories":["Complexity"],"check_name":"file_lines","content":{"body":""},"description":"File `throttle.js` has 666 lines of code (exceeds 250 allowed). Consider refactoring.","fingerprint":"d0e8db7dc9335612bf0fd15824200609","location":{"path":"lib/throttle.js","lines":{"begin":1,"end":1030}},"other_locations":[],"remediation_points":7190400,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `getQueueItems` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.","fingerprint":"b668ead8e2544e9ad7f137b04536bd70","location":{"path":"lib/throttle.js","lines":{"begin":51,"end":150}},"other_locations":[],"remediation_points":350000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `refreshProperties` has a Cognitive Complexity of 16 (exceeds 5 allowed). Consider refactoring.","fingerprint":"d22015b76d9ea85d9d8a3fb66e122eb8","location":{"path":"lib/throttle.js","lines":{"begin":504,"end":568}},"other_locations":[],"remediation_points":1250000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `verifyReady` has a Cognitive Complexity of 10 (exceeds 5 allowed). Consider refactoring.","fingerprint":"80f954b498361eb51e8f936d2d2a3a2c","location":{"path":"lib/throttle.js","lines":{"begin":578,"end":681}},"other_locations":[],"remediation_points":650000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `waitingMyTurn` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.","fingerprint":"1f913a7e75ccc697393039e8e5078e62","location":{"path":"lib/throttle.js","lines":{"begin":813,"end":890}},"other_locations":[],"remediation_points":450000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `finishTurn` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring.","fingerprint":"6074b2c2cb8357669e3f12fe5e76b157","location":{"path":"lib/throttle.js","lines":{"begin":903,"end":1007}},"other_locations":[],"remediation_points":550000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `getQueueItems` has 70 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"51390a4325432dab366f9da89d42dceb","location":{"path":"lib/throttle.js","lines":{"begin":51,"end":150}},"other_locations":[],"remediation_points":1680000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `claimTurn` has 45 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"67c8dc9060fc03a011f3c3fabff9e6d9","location":{"path":"lib/throttle.js","lines":{"begin":157,"end":217}},"other_locations":[],"remediation_points":1080000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `freeQueueItem` has 33 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"c0c574a2e10e86c3fb0afe352c57f731","location":{"path":"lib/throttle.js","lines":{"begin":224,"end":268}},"other_locations":[],"remediation_points":792000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `freeExpiredQueueItems` has 42 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"9103d9062815a40bb27b3fcdc7bfba47","location":{"path":"lib/throttle.js","lines":{"begin":278,"end":338}},"other_locations":[],"remediation_points":1008000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `checkTurnAvailable` has 42 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"3cbb17bb6190efef25c6ce1cb7d0355a","location":{"path":"lib/throttle.js","lines":{"begin":345,"end":409}},"other_locations":[],"remediation_points":1008000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `refreshProperties` has 44 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"cf404d0cc020c3198594b32e7b326671","location":{"path":"lib/throttle.js","lines":{"begin":504,"end":568}},"other_locations":[],"remediation_points":1056000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `verifyReady` has 78 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"4f88eb70da553558c798c203ffd06b97","location":{"path":"lib/throttle.js","lines":{"begin":578,"end":681}},"other_locations":[],"remediation_points":1872000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `requestQueueItem` has 79 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"8754969faba4e0be80ccd62685258534","location":{"path":"lib/throttle.js","lines":{"begin":693,"end":800}},"other_locations":[],"remediation_points":1896000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `waitingMyTurn` has 56 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"330cfdd1f5ade869fe1db20b4d024d16","location":{"path":"lib/throttle.js","lines":{"begin":813,"end":890}},"other_locations":[],"remediation_points":1344000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `finishTurn` has 81 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"06a65d8d0f027dcbc7c63322f905b4ac","location":{"path":"lib/throttle.js","lines":{"begin":903,"end":1007}},"other_locations":[],"remediation_points":1944000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/throttle.js","lines":{"begin":148,"end":148}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"dda456f27f50afd1e6d202bf087cac66"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/throttle.js","lines":{"begin":798,"end":798}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"dda456f27f50afd1e6d202bf087cac66"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/throttle.js","lines":{"begin":841,"end":884}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"a2e863c8aa9e6bb98c79886868a2597d"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/throttle.js","lines":{"begin":888,"end":888}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"dda456f27f50afd1e6d202bf087cac66"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/throttle.js","lines":{"begin":970,"end":979}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"7dc04dc253ca8ee45ed941d3c7d01b1e"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/throttle.js","lines":{"begin":984,"end":1001}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"645b9d49277f7b6ef35c30804af284a7"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/throttle.js","lines":{"begin":1005,"end":1005}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"dda456f27f50afd1e6d202bf087cac66"},{"categories":["Complexity"],"check_name":"file_lines","content":{"body":""},"description":"File `translatorUtil.js` has 493 lines of code (exceeds 250 allowed). Consider refactoring.","fingerprint":"1e3b487e357d4457addaa9676fae159f","location":{"path":"lib/translatorUtil.js","lines":{"begin":1,"end":911}},"other_locations":[],"remediation_points":4699200,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `mergeObjects` has a Cognitive Complexity of 10 (exceeds 5 allowed). Consider refactoring.","fingerprint":"7b5b75d02fa9a5ffe54d13d86a6e1d47","location":{"path":"lib/translatorUtil.js","lines":{"begin":30,"end":61}},"other_locations":[],"remediation_points":650000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `getValueFromObject` has a Cognitive Complexity of 34 (exceeds 5 allowed). Consider refactoring.","fingerprint":"ff35cf7ee46e90166fad01a4317f8bd8","location":{"path":"lib/translatorUtil.js","lines":{"begin":76,"end":170}},"other_locations":[],"remediation_points":3050000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `extractObject` has a Cognitive Complexity of 48 (exceeds 5 allowed). Consider refactoring.","fingerprint":"569b129ce9fcd7ba64583cd511a8b2b0","location":{"path":"lib/translatorUtil.js","lines":{"begin":185,"end":293}},"other_locations":[],"remediation_points":4450000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `buildObject` has a Cognitive Complexity of 50 (exceeds 5 allowed). Consider refactoring.","fingerprint":"e8e5c80ebc3ec6e44eadbf20ea768d99","location":{"path":"lib/translatorUtil.js","lines":{"begin":362,"end":470}},"other_locations":[],"remediation_points":4650000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `mapFromOutboundEntity` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring.","fingerprint":"16985771e56c5d740d3e2919e1b70bd0","location":{"path":"lib/translatorUtil.js","lines":{"begin":567,"end":631}},"other_locations":[],"remediation_points":550000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `mapToOutboundEntity` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring.","fingerprint":"d80c20eb7c7171195a506b6160c031ad","location":{"path":"lib/translatorUtil.js","lines":{"begin":643,"end":707}},"other_locations":[],"remediation_points":550000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `formatErrorObject` has a Cognitive Complexity of 12 (exceeds 5 allowed). Consider refactoring.","fingerprint":"d14e8ad95862c5924dd3c91bd3032d91","location":{"path":"lib/translatorUtil.js","lines":{"begin":754,"end":813}},"other_locations":[],"remediation_points":850000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `getValueFromObject` has 60 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"cffe5085f70826c5b18eecca077159e6","location":{"path":"lib/translatorUtil.js","lines":{"begin":76,"end":170}},"other_locations":[],"remediation_points":1440000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `extractObject` has 68 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"fd2e86fdc3729844181394b3de6a5bd2","location":{"path":"lib/translatorUtil.js","lines":{"begin":185,"end":293}},"other_locations":[],"remediation_points":1632000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `buildObject` has 67 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"83fba7c20c531b6cf48efb8db70b51f3","location":{"path":"lib/translatorUtil.js","lines":{"begin":362,"end":470}},"other_locations":[],"remediation_points":1608000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `mapFromOutboundEntity` has 38 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"8ed54557ee2677e9102ff40899b29e02","location":{"path":"lib/translatorUtil.js","lines":{"begin":567,"end":631}},"other_locations":[],"remediation_points":912000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `mapToOutboundEntity` has 38 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"b51f80070d69e5bfd06b7ef006cb74ab","location":{"path":"lib/translatorUtil.js","lines":{"begin":643,"end":707}},"other_locations":[],"remediation_points":912000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `formatErrorObject` has 45 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"6a6b115372d2c524cfb4e2dc7116bda3","location":{"path":"lib/translatorUtil.js","lines":{"begin":754,"end":813}},"other_locations":[],"remediation_points":1080000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"nested_control_flow","content":{"body":""},"description":"Avoid deeply nested control flow statements.","location":{"path":"lib/translatorUtil.js","lines":{"begin":228,"end":236}},"other_locations":[],"remediation_points":450000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"d65663596dbcb3332eafb417a8d28158"},{"categories":["Complexity"],"check_name":"nested_control_flow","content":{"body":""},"description":"Avoid deeply nested control flow statements.","location":{"path":"lib/translatorUtil.js","lines":{"begin":276,"end":278}},"other_locations":[],"remediation_points":450000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"0dac325b9ac971ac657783cc8946d6cc"},{"categories":["Complexity"],"check_name":"nested_control_flow","content":{"body":""},"description":"Avoid deeply nested control flow statements.","location":{"path":"lib/translatorUtil.js","lines":{"begin":279,"end":281}},"other_locations":[],"remediation_points":450000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"18ca986d5ce13d7d0e723793fac6e1a0"},{"categories":["Complexity"],"check_name":"nested_control_flow","content":{"body":""},"description":"Avoid deeply nested control flow statements.","location":{"path":"lib/translatorUtil.js","lines":{"begin":407,"end":429}},"other_locations":[],"remediation_points":450000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"7c031ada14117ca040f3a7a353f69b52"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/translatorUtil.js","lines":{"begin":110,"end":110}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"9e1a7081f1175020a3053a11cd700ae0"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/translatorUtil.js","lines":{"begin":118,"end":118}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"d8faf32bad44ae9a070393a7d2376be7"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/translatorUtil.js","lines":{"begin":143,"end":143}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"d8faf32bad44ae9a070393a7d2376be7"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/translatorUtil.js","lines":{"begin":146,"end":146}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"f2664d5b0d62a7003df4d654091ccb64"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/translatorUtil.js","lines":{"begin":161,"end":161}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"bbc60a96e5e3caa13def6e09abcef938"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/translatorUtil.js","lines":{"begin":164,"end":164}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"4638db4387de632b1dccddcb0144b02a"},{"categories":["Complexity"],"check_name":"return_statements","content":{"body":""},"description":"Avoid too many `return` statements within this function.","location":{"path":"lib/translatorUtil.js","lines":{"begin":169,"end":169}},"other_locations":[],"remediation_points":300000,"severity":"major","type":"issue","engine_name":"structure","fingerprint":"d8faf32bad44ae9a070393a7d2376be7"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1988,"end":2002}},"remediation_points":4740000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":2022,"end":2036}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 193**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"c10a93a1944d8b140f48a22b357945e5","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":2022,"end":2036}},"remediation_points":4740000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1988,"end":2002}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 193**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"c10a93a1944d8b140f48a22b357945e5","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":2123,"end":2147}},"remediation_points":4650000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":2265,"end":2289}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 190**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"0f0485d50ce8bd0a67c0c36929c99207","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":2265,"end":2289}},"remediation_points":4650000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":2123,"end":2147}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 190**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"0f0485d50ce8bd0a67c0c36929c99207","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":760,"end":772}},"remediation_points":3540000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":2108,"end":2120}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 153**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"5bfca25be4816cead1beb93a79b31702","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":2108,"end":2120}},"remediation_points":3540000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":760,"end":772}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 153**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"5bfca25be4816cead1beb93a79b31702","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1409,"end":1453}},"remediation_points":690000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1566,"end":1570}},{"path":"lib/connectorRest.js","lines":{"begin":1637,"end":1641}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 58**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"06a1772eb27c7383750b2da24c92c432","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1566,"end":1570}},"remediation_points":690000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1409,"end":1453}},{"path":"lib/connectorRest.js","lines":{"begin":1637,"end":1641}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 58**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"06a1772eb27c7383750b2da24c92c432","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1637,"end":1641}},"remediation_points":690000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1409,"end":1453}},{"path":"lib/connectorRest.js","lines":{"begin":1566,"end":1570}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 58**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"06a1772eb27c7383750b2da24c92c432","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1276,"end":1286}},"remediation_points":2280000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1351,"end":1361}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 111**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"652cd4058211aeef37e2fd55459fe2cf","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1351,"end":1361}},"remediation_points":2280000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1276,"end":1286}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 111**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"652cd4058211aeef37e2fd55459fe2cf","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":749,"end":756}},"remediation_points":2130000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":2097,"end":2104}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 106**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"4ea4d3fecf591a661a1284d14c169487","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":2097,"end":2104}},"remediation_points":2130000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":749,"end":756}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 106**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"4ea4d3fecf591a661a1284d14c169487","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":270,"end":284}},"remediation_points":4890000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":297,"end":311}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 198**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"945e4bbbee13a13bb6d056bfb6676cad","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":297,"end":311}},"remediation_points":4890000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":270,"end":284}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 198**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"945e4bbbee13a13bb6d056bfb6676cad","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 6 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1791,"end":1794}},"remediation_points":810000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1797,"end":1800}},{"path":"lib/connectorRest.js","lines":{"begin":1844,"end":1847}},{"path":"lib/connectorRest.js","lines":{"begin":1850,"end":1853}},{"path":"lib/connectorRest.js","lines":{"begin":1856,"end":1859}},{"path":"lib/connectorRest.js","lines":{"begin":1884,"end":1886}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 62**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ef6f0fe5569602e3b7494b9dafbb0eb4","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 6 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1797,"end":1800}},"remediation_points":810000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1791,"end":1794}},{"path":"lib/connectorRest.js","lines":{"begin":1844,"end":1847}},{"path":"lib/connectorRest.js","lines":{"begin":1850,"end":1853}},{"path":"lib/connectorRest.js","lines":{"begin":1856,"end":1859}},{"path":"lib/connectorRest.js","lines":{"begin":1884,"end":1886}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 62**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ef6f0fe5569602e3b7494b9dafbb0eb4","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 6 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1844,"end":1847}},"remediation_points":810000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1791,"end":1794}},{"path":"lib/connectorRest.js","lines":{"begin":1797,"end":1800}},{"path":"lib/connectorRest.js","lines":{"begin":1850,"end":1853}},{"path":"lib/connectorRest.js","lines":{"begin":1856,"end":1859}},{"path":"lib/connectorRest.js","lines":{"begin":1884,"end":1886}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 62**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ef6f0fe5569602e3b7494b9dafbb0eb4","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 6 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1850,"end":1853}},"remediation_points":810000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1791,"end":1794}},{"path":"lib/connectorRest.js","lines":{"begin":1797,"end":1800}},{"path":"lib/connectorRest.js","lines":{"begin":1844,"end":1847}},{"path":"lib/connectorRest.js","lines":{"begin":1856,"end":1859}},{"path":"lib/connectorRest.js","lines":{"begin":1884,"end":1886}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 62**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ef6f0fe5569602e3b7494b9dafbb0eb4","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 6 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1856,"end":1859}},"remediation_points":810000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1791,"end":1794}},{"path":"lib/connectorRest.js","lines":{"begin":1797,"end":1800}},{"path":"lib/connectorRest.js","lines":{"begin":1844,"end":1847}},{"path":"lib/connectorRest.js","lines":{"begin":1850,"end":1853}},{"path":"lib/connectorRest.js","lines":{"begin":1884,"end":1886}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 62**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ef6f0fe5569602e3b7494b9dafbb0eb4","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 6 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1884,"end":1886}},"remediation_points":810000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1791,"end":1794}},{"path":"lib/connectorRest.js","lines":{"begin":1797,"end":1800}},{"path":"lib/connectorRest.js","lines":{"begin":1844,"end":1847}},{"path":"lib/connectorRest.js","lines":{"begin":1850,"end":1853}},{"path":"lib/connectorRest.js","lines":{"begin":1856,"end":1859}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 62**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ef6f0fe5569602e3b7494b9dafbb0eb4","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/requestHandler.js","lines":{"begin":66,"end":77}},"remediation_points":2220000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":324,"end":335}},{"path":"lib/translatorUtil.js","lines":{"begin":500,"end":511}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 109**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"74ab6da0818ad4e81ba8857012c8d275","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":324,"end":335}},"remediation_points":2220000,"other_locations":[{"path":"lib/requestHandler.js","lines":{"begin":66,"end":77}},{"path":"lib/translatorUtil.js","lines":{"begin":500,"end":511}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 109**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b39a1c06097f9e2ce18562d46d765e57","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":500,"end":511}},"remediation_points":2220000,"other_locations":[{"path":"lib/requestHandler.js","lines":{"begin":66,"end":77}},{"path":"lib/translatorUtil.js","lines":{"begin":324,"end":335}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 109**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b39a1c06097f9e2ce18562d46d765e57","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":776,"end":784}},"remediation_points":1380000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":780,"end":784}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 81**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b9f57b6dd856d8b2fb5fc92403fd5228","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":780,"end":784}},"remediation_points":1380000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":776,"end":784}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 81**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b9f57b6dd856d8b2fb5fc92403fd5228","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/restHandler.js","lines":{"begin":694,"end":713}},"remediation_points":3750000,"other_locations":[{"path":"lib/restHandler.js","lines":{"begin":786,"end":805}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 160**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"8a839e98e60b8f8ecc9b45e25e514ad7","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/restHandler.js","lines":{"begin":786,"end":805}},"remediation_points":3750000,"other_locations":[{"path":"lib/restHandler.js","lines":{"begin":694,"end":713}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 160**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"8a839e98e60b8f8ecc9b45e25e514ad7","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":846,"end":852}},"remediation_points":1170000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":893,"end":899}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 74**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ae1957920a8a9dd0de5a639fa5624028","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":893,"end":899}},"remediation_points":1170000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":846,"end":852}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 74**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ae1957920a8a9dd0de5a639fa5624028","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 5 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":516,"end":518}},"remediation_points":690000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":529,"end":531}},{"path":"lib/throttle.js","lines":{"begin":534,"end":536}},{"path":"lib/throttle.js","lines":{"begin":539,"end":541}},{"path":"lib/throttle.js","lines":{"begin":544,"end":546}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 58**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"185fcf5a2ed5add103423fc66d74d23a","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 5 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":529,"end":531}},"remediation_points":690000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":516,"end":518}},{"path":"lib/throttle.js","lines":{"begin":534,"end":536}},{"path":"lib/throttle.js","lines":{"begin":539,"end":541}},{"path":"lib/throttle.js","lines":{"begin":544,"end":546}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 58**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"185fcf5a2ed5add103423fc66d74d23a","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 5 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":534,"end":536}},"remediation_points":690000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":516,"end":518}},{"path":"lib/throttle.js","lines":{"begin":529,"end":531}},{"path":"lib/throttle.js","lines":{"begin":539,"end":541}},{"path":"lib/throttle.js","lines":{"begin":544,"end":546}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 58**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"185fcf5a2ed5add103423fc66d74d23a","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 5 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":539,"end":541}},"remediation_points":690000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":516,"end":518}},{"path":"lib/throttle.js","lines":{"begin":529,"end":531}},{"path":"lib/throttle.js","lines":{"begin":534,"end":536}},{"path":"lib/throttle.js","lines":{"begin":544,"end":546}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 58**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"185fcf5a2ed5add103423fc66d74d23a","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 5 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":544,"end":546}},"remediation_points":690000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":516,"end":518}},{"path":"lib/throttle.js","lines":{"begin":529,"end":531}},{"path":"lib/throttle.js","lines":{"begin":534,"end":536}},{"path":"lib/throttle.js","lines":{"begin":539,"end":541}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 58**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"185fcf5a2ed5add103423fc66d74d23a","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":65,"end":73}},"remediation_points":1110000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":95,"end":103}},{"path":"lib/throttle.js","lines":{"begin":119,"end":127}},{"path":"lib/throttle.js","lines":{"begin":136,"end":144}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 72**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"2a66f6dcf56bd0722ff5d2c20f03b02d","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":95,"end":103}},"remediation_points":1110000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":65,"end":73}},{"path":"lib/throttle.js","lines":{"begin":119,"end":127}},{"path":"lib/throttle.js","lines":{"begin":136,"end":144}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 72**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"2a66f6dcf56bd0722ff5d2c20f03b02d","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":119,"end":127}},"remediation_points":1110000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":65,"end":73}},{"path":"lib/throttle.js","lines":{"begin":95,"end":103}},{"path":"lib/throttle.js","lines":{"begin":136,"end":144}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 72**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"2a66f6dcf56bd0722ff5d2c20f03b02d","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":136,"end":144}},"remediation_points":1110000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":65,"end":73}},{"path":"lib/throttle.js","lines":{"begin":95,"end":103}},{"path":"lib/throttle.js","lines":{"begin":119,"end":127}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 72**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"2a66f6dcf56bd0722ff5d2c20f03b02d","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/propertyUtil.js","lines":{"begin":68,"end":76}},"remediation_points":1650000,"other_locations":[{"path":"lib/propertyUtil.js","lines":{"begin":177,"end":185}},{"path":"lib/propertyUtil.js","lines":{"begin":188,"end":196}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 90**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"f00b2a58f235e65bd80c1b05b3c5b2cd","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/propertyUtil.js","lines":{"begin":177,"end":185}},"remediation_points":1650000,"other_locations":[{"path":"lib/propertyUtil.js","lines":{"begin":68,"end":76}},{"path":"lib/propertyUtil.js","lines":{"begin":188,"end":196}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 90**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"f00b2a58f235e65bd80c1b05b3c5b2cd","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/propertyUtil.js","lines":{"begin":188,"end":196}},"remediation_points":1650000,"other_locations":[{"path":"lib/propertyUtil.js","lines":{"begin":68,"end":76}},{"path":"lib/propertyUtil.js","lines":{"begin":177,"end":185}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 90**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"f00b2a58f235e65bd80c1b05b3c5b2cd","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1300,"end":1304}},"remediation_points":930000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1376,"end":1380}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 66**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"3dcbf6d0cd7799c1d454a3eaac70c2ce","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1376,"end":1380}},"remediation_points":930000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1300,"end":1304}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 66**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"3dcbf6d0cd7799c1d454a3eaac70c2ce","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/requestHandler.js","lines":{"begin":749,"end":754}},"remediation_points":780000,"other_locations":[{"path":"lib/requestHandler.js","lines":{"begin":767,"end":772}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 61**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"a1a58341fe9ea6b93fb3cbbec58b7e74","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/requestHandler.js","lines":{"begin":767,"end":772}},"remediation_points":780000,"other_locations":[{"path":"lib/requestHandler.js","lines":{"begin":749,"end":754}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 61**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"a1a58341fe9ea6b93fb3cbbec58b7e74","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":203,"end":211}},"remediation_points":1380000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":232,"end":240}},{"path":"lib/throttle.js","lines":{"begin":254,"end":262}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 81**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b03466526186215a569a27ceabd86cd9","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":232,"end":240}},"remediation_points":1380000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":203,"end":211}},{"path":"lib/throttle.js","lines":{"begin":254,"end":262}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 81**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b03466526186215a569a27ceabd86cd9","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":254,"end":262}},"remediation_points":1380000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":203,"end":211}},{"path":"lib/throttle.js","lines":{"begin":232,"end":240}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 81**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b03466526186215a569a27ceabd86cd9","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1980,"end":1983}},"remediation_points":630000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":2014,"end":2017}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 56**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"547a040d4c9387e0b7d70e7ee5914c57","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":2014,"end":2017}},"remediation_points":630000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1980,"end":1983}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 56**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"547a040d4c9387e0b7d70e7ee5914c57","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":698,"end":702}},"remediation_points":1110000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":818,"end":822}},{"path":"lib/throttle.js","lines":{"begin":908,"end":912}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 72**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"2a66f6dcf56bd0722ff5d2c20f03b02d","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":818,"end":822}},"remediation_points":1110000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":698,"end":702}},{"path":"lib/throttle.js","lines":{"begin":908,"end":912}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 72**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"2a66f6dcf56bd0722ff5d2c20f03b02d","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":908,"end":912}},"remediation_points":1110000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":698,"end":702}},{"path":"lib/throttle.js","lines":{"begin":818,"end":822}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 72**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"2a66f6dcf56bd0722ff5d2c20f03b02d","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":192,"end":195}},"remediation_points":540000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":370,"end":373}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 53**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"85cc9d38efaf439eaa8dea193e3efd5f","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":370,"end":373}},"remediation_points":540000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":192,"end":195}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 53**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"85cc9d38efaf439eaa8dea193e3efd5f","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":741,"end":745}},"remediation_points":1020000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":2089,"end":2093}},{"path":"lib/connectorRest.js","lines":{"begin":2258,"end":2262}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 69**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"d3eb19a48a1387d1e5f7247de79830b5","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":2089,"end":2093}},"remediation_points":1020000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":741,"end":745}},{"path":"lib/connectorRest.js","lines":{"begin":2258,"end":2262}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 69**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"d3eb19a48a1387d1e5f7247de79830b5","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":2258,"end":2262}},"remediation_points":1020000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":741,"end":745}},{"path":"lib/connectorRest.js","lines":{"begin":2089,"end":2093}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 69**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"d3eb19a48a1387d1e5f7247de79830b5","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":409,"end":428}},"remediation_points":2040000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":438,"end":450}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 103**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"e13d60fd46f75e711f3c6e45821d553d","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":438,"end":450}},"remediation_points":2040000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":409,"end":428}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 103**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"e13d60fd46f75e711f3c6e45821d553d","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1289,"end":1297}},"remediation_points":450000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1364,"end":1373}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 50**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"f4a441f8aa96b7a0497d25c51cc17a2c","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1364,"end":1373}},"remediation_points":450000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1289,"end":1297}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 50**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"f4a441f8aa96b7a0497d25c51cc17a2c","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":197,"end":200}},"remediation_points":420000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":375,"end":378}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 49**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"76d2efd4981fc9edb5b496928154a930","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":375,"end":378}},"remediation_points":420000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":197,"end":200}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 49**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"76d2efd4981fc9edb5b496928154a930","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/propertyUtil.js","lines":{"begin":319,"end":323}},"remediation_points":360000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":902,"end":906}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 47**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b8b50ad0c610cded898e701360f69c7e","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":902,"end":906}},"remediation_points":360000,"other_locations":[{"path":"lib/propertyUtil.js","lines":{"begin":319,"end":323}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 47**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"f77e8933d2a9cf0d0f92b20b90d4c716","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":836,"end":843}},"remediation_points":300000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":883,"end":890}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 45**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"1ef2c18e60a79d25c3613a88f8346b40","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":883,"end":890}},"remediation_points":300000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":836,"end":843}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 45**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"1ef2c18e60a79d25c3613a88f8346b40","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":393,"end":400}},"remediation_points":1560000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":413,"end":420}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 87**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"69126573bc61d0f3675f7dab7aaec68a","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":413,"end":420}},"remediation_points":1560000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":393,"end":400}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 87**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"69126573bc61d0f3675f7dab7aaec68a","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/requestHandler.js","lines":{"begin":350,"end":354}},"remediation_points":690000,"other_locations":[{"path":"lib/requestHandler.js","lines":{"begin":355,"end":359}},{"path":"lib/requestHandler.js","lines":{"begin":365,"end":369}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 58**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"7257f1ae1b21d812dd54727f0e1c8001","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/requestHandler.js","lines":{"begin":355,"end":359}},"remediation_points":690000,"other_locations":[{"path":"lib/requestHandler.js","lines":{"begin":350,"end":354}},{"path":"lib/requestHandler.js","lines":{"begin":365,"end":369}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 58**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"7257f1ae1b21d812dd54727f0e1c8001","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/requestHandler.js","lines":{"begin":365,"end":369}},"remediation_points":690000,"other_locations":[{"path":"lib/requestHandler.js","lines":{"begin":350,"end":354}},{"path":"lib/requestHandler.js","lines":{"begin":355,"end":359}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 58**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"7257f1ae1b21d812dd54727f0e1c8001","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/restHandler.js","lines":{"begin":662,"end":666}},"remediation_points":1470000,"other_locations":[{"path":"lib/restHandler.js","lines":{"begin":669,"end":673}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 84**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"54931719708789279ba686c3086ac6b1","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/restHandler.js","lines":{"begin":669,"end":673}},"remediation_points":1470000,"other_locations":[{"path":"lib/restHandler.js","lines":{"begin":662,"end":666}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 84**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"54931719708789279ba686c3086ac6b1","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":823,"end":827}},"remediation_points":1470000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":828,"end":832}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 84**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"426a20fa095b10fb5fb1e103440a182e","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":828,"end":832}},"remediation_points":1470000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":823,"end":827}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 84**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"426a20fa095b10fb5fb1e103440a182e","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":598,"end":608}},"remediation_points":1470000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":674,"end":684}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 84**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"3ffbc36a2fbb99b43b06896e5d2f0666","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":674,"end":684}},"remediation_points":1470000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":598,"end":608}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 84**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"3ffbc36a2fbb99b43b06896e5d2f0666","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":529,"end":533}},"remediation_points":1440000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":575,"end":579}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 83**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ae003639f40fda017bb555cefb944e78","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":575,"end":579}},"remediation_points":1440000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":529,"end":533}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 83**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ae003639f40fda017bb555cefb944e78","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":614,"end":623}},"remediation_points":1410000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":690,"end":699}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 82**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"87e6b0f4c5f0284173f574b4b522ad46","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":690,"end":699}},"remediation_points":1410000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":614,"end":623}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 82**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"87e6b0f4c5f0284173f574b4b522ad46","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/propertyUtil.js","lines":{"begin":131,"end":139}},"remediation_points":1320000,"other_locations":[{"path":"lib/propertyUtil.js","lines":{"begin":140,"end":148}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 79**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"881ed611813ef8774142d64a4904e52d","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/propertyUtil.js","lines":{"begin":140,"end":148}},"remediation_points":1320000,"other_locations":[{"path":"lib/propertyUtil.js","lines":{"begin":131,"end":139}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 79**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"881ed611813ef8774142d64a4904e52d","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":578,"end":586}},"remediation_points":1290000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":654,"end":662}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 78**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"6f983627c1320bf6810d574c06e3a679","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":654,"end":662}},"remediation_points":1290000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":578,"end":586}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 78**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"6f983627c1320bf6810d574c06e3a679","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1417,"end":1453}},"remediation_points":1170000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1431,"end":1453}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 74**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"720245b0255515681d7e5856f60a794a","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1431,"end":1453}},"remediation_points":1170000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1417,"end":1453}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 74**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"720245b0255515681d7e5856f60a794a","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/propertyUtil.js","lines":{"begin":82,"end":90}},"remediation_points":1170000,"other_locations":[{"path":"lib/propertyUtil.js","lines":{"begin":205,"end":213}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 74**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"41f85fa997a754f5994302f45cd60c96","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/propertyUtil.js","lines":{"begin":205,"end":213}},"remediation_points":1170000,"other_locations":[{"path":"lib/propertyUtil.js","lines":{"begin":82,"end":90}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 74**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"41f85fa997a754f5994302f45cd60c96","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/restHandler.js","lines":{"begin":809,"end":813}},"remediation_points":1080000,"other_locations":[{"path":"lib/restHandler.js","lines":{"begin":816,"end":820}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 71**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"c59edce72fab5b668890675dfc8bd3a3","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/restHandler.js","lines":{"begin":816,"end":820}},"remediation_points":1080000,"other_locations":[{"path":"lib/restHandler.js","lines":{"begin":809,"end":813}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 71**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"c59edce72fab5b668890675dfc8bd3a3","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/restHandler.js","lines":{"begin":529,"end":536}},"remediation_points":1050000,"other_locations":[{"path":"lib/restHandler.js","lines":{"begin":538,"end":545}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 70**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"7957e114d5e14fa2a3fab4dd64335590","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/restHandler.js","lines":{"begin":538,"end":545}},"remediation_points":1050000,"other_locations":[{"path":"lib/restHandler.js","lines":{"begin":529,"end":536}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 70**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"7957e114d5e14fa2a3fab4dd64335590","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":194,"end":203}},"remediation_points":960000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":984,"end":993}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 67**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"cea0ada1f1287dff4653217b136e4402","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":984,"end":993}},"remediation_points":960000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":194,"end":203}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 67**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"cea0ada1f1287dff4653217b136e4402","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":2003,"end":2007}},"remediation_points":870000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":2037,"end":2041}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 64**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"55f75c493fd62ef6a26c3254ac1678b6","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":2037,"end":2041}},"remediation_points":870000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":2003,"end":2007}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 64**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"55f75c493fd62ef6a26c3254ac1678b6","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":560,"end":566}},"remediation_points":840000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":953,"end":959}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 63**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b578017f5b4076d33c9e962dbd3405d0","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":953,"end":959}},"remediation_points":840000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":560,"end":566}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 63**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b578017f5b4076d33c9e962dbd3405d0","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":616,"end":620}},"remediation_points":810000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":726,"end":730}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 62**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"efbd1f23a7e4ca9a7c31f496f8053698","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":726,"end":730}},"remediation_points":810000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":616,"end":620}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 62**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"efbd1f23a7e4ca9a7c31f496f8053698","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":655,"end":659}},"remediation_points":750000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":741,"end":745}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 60**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"a3f09224bc9ab5e616e5ab09bee12372","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":741,"end":745}},"remediation_points":750000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":655,"end":659}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 60**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"a3f09224bc9ab5e616e5ab09bee12372","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":971,"end":975}},"remediation_points":750000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":994,"end":998}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 60**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"a3f09224bc9ab5e616e5ab09bee12372","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":994,"end":998}},"remediation_points":750000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":971,"end":975}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 60**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"a3f09224bc9ab5e616e5ab09bee12372","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":625,"end":629}},"remediation_points":720000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":641,"end":645}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 59**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"585c48d8724b1cf06bd6336123d6a406","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/throttle.js","lines":{"begin":641,"end":645}},"remediation_points":720000,"other_locations":[{"path":"lib/throttle.js","lines":{"begin":625,"end":629}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 59**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"585c48d8724b1cf06bd6336123d6a406","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/restHandler.js","lines":{"begin":480,"end":504}},"remediation_points":570000,"other_locations":[{"path":"lib/restHandler.js","lines":{"begin":488,"end":504}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 54**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ff530f223cad918261fe2900081f64da","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/restHandler.js","lines":{"begin":488,"end":504}},"remediation_points":570000,"other_locations":[{"path":"lib/restHandler.js","lines":{"begin":480,"end":504}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 54**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ff530f223cad918261fe2900081f64da","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1066,"end":1070}},"remediation_points":540000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1241,"end":1245}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 53**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"0cf50f39f18062388a35e1e9fcada4fb","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1241,"end":1245}},"remediation_points":540000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1066,"end":1070}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 53**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"0cf50f39f18062388a35e1e9fcada4fb","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1507,"end":1512}},"remediation_points":360000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1536,"end":1541}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 47**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"bfbf8c2e9fce5c977f01bde217a1ebdb","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1536,"end":1541}},"remediation_points":360000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1507,"end":1512}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 47**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"bfbf8c2e9fce5c977f01bde217a1ebdb","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/connectorRest.js","lines":{"begin":1702,"end":1705}},"remediation_points":360000,"other_locations":[{"path":"lib/translatorUtil.js","lines":{"begin":546,"end":549}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 47**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"bfbf8c2e9fce5c977f01bde217a1ebdb","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/translatorUtil.js","lines":{"begin":546,"end":549}},"remediation_points":360000,"other_locations":[{"path":"lib/connectorRest.js","lines":{"begin":1702,"end":1705}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 47**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"5c8dafeebb810e9ea7c61653f894eca1","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/restHandler.js","lines":{"begin":733,"end":740}},"remediation_points":330000,"other_locations":[{"path":"lib/restHandler.js","lines":{"begin":845,"end":852}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 46**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"11ae67db2e364e76b5e5ea2a28552f46","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"lib/restHandler.js","lines":{"begin":845,"end":852}},"remediation_points":330000,"other_locations":[{"path":"lib/restHandler.js","lines":{"begin":733,"end":740}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 46**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"11ae67db2e364e76b5e5ea2a28552f46","severity":"minor","engine_name":"duplication"},{"type":"issue","categories":["Style"],"check_name":"import/no-dynamic-require","description":"Calls to require() should use string literals","content":{"body":"For more information visit Source: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":26,"column":20},"end":{"line":26,"column":20}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"49ce635b8969011337657af4b1167c5f","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-unused-vars","description":"'allowFailover' is assigned a value but never used.","content":{"body":"# Disallow Unused Variables (no-unused-vars)\n\nVariables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.\n\n## Rule Details\n\nThis rule is aimed at eliminating unused variables, functions, and parameters of functions.\n\nA variable is considered to be used if any of the following are true:\n\n* It represents a function that is called (`doSomething()`)\n* It is read (`var y = x`)\n* It is passed into a function as an argument (`doSomething(x)`)\n* It is read inside of a function that is passed to another function (`doSomething(function() { foo(); })`)\n\nA variable is *not* considered to be used if it is only ever assigned to (`var x = 5`) or declared.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n/*global some_unused_var*/\n\n// It checks variables you have defined as global\nsome_unused_var = 42;\n\nvar x;\n\n// Write-only variables are not considered as used.\nvar y = 10;\ny = 5;\n\n// A read for a modification of itself is not considered as used.\nvar z = 0;\nz = z + 1;\n\n// By default, unused arguments cause warnings.\n(function(foo) {\n    return 5;\n})();\n\n// Unused recursive functions also cause warnings.\nfunction fact(n) {\n    if (n < 2) return 1;\n    return n * fact(n - 1);\n}\n\n// When a function definition destructures an array, unused entries from the array also cause warnings.\nfunction getY([x, y]) {\n    return y;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n\nvar x = 10;\nalert(x);\n\n// foo is considered used here\nmyFunc(function foo() {\n    // ...\n}.bind(this));\n\n(function(foo) {\n    return foo;\n})();\n\nvar myFunc;\nmyFunc = setTimeout(function() {\n    // myFunc is considered used\n    myFunc();\n}, 50);\n\n// Only the second argument from the descructured array is used.\nfunction getY([, y]) {\n    return y;\n}\n```\n\n### exported\n\nIn environments outside of CommonJS or ECMAScript modules, you may use `var` to create a global variable that may be used by other scripts. You can use the `/* exported variableName */` comment block to indicate that this variable is being exported and therefore should not be considered unused.\n\nNote that `/* exported */` has no effect for any of the following:\n\n* when the environment is `node` or `commonjs`\n* when `parserOptions.sourceType` is `module`\n* when `ecmaFeatures.globalReturn` is `true`\n\nThe line comment `// exported variableName` will not work as `exported` is not line-specific.\n\nExamples of **correct** code for `/* exported variableName */` operation:\n\n```js\n/* exported global_var */\n\nvar global_var = 42;\n```\n\n## Options\n\nThis rule takes one argument which can be a string or an object. The string settings are the same as those of the `vars` property (explained below).\n\nBy default this rule is enabled with `all` option for variables and `after-used` for arguments.\n\n```json\n{\n    \"rules\": {\n        \"no-unused-vars\": [\"error\", { \"vars\": \"all\", \"args\": \"after-used\", \"ignoreRestSiblings\": false }]\n    }\n}\n```\n\n### vars\n\nThe `vars` option has two settings:\n\n* `all` checks all variables for usage, including those in the global scope. This is the default setting.\n* `local` checks only that locally-declared variables are used but will allow global variables to be unused.\n\n#### vars: local\n\nExamples of **correct** code for the `{ \"vars\": \"local\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }]*/\n/*global some_unused_var */\n\nsome_unused_var = 42;\n```\n\n### varsIgnorePattern\n\nThe `varsIgnorePattern` option specifies exceptions not to check for usage: variables whose names match a regexp pattern. For example, variables whose names contain `ignored` or `Ignored`.\n\nExamples of **correct** code for the `{ \"varsIgnorePattern\": \"[iI]gnored\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"[iI]gnored\" }]*/\n\nvar firstVarIgnored = 1;\nvar secondVar = 2;\nconsole.log(secondVar);\n```\n\n### args\n\nThe `args` option has three settings:\n\n* `after-used` - only the last argument must be used. This allows you, for instance, to have two named parameters to a function and as long as you use the second argument, ESLint will not warn you about the first. This is the default setting.\n* `all` - all named arguments must be used.\n* `none` - do not check arguments.\n\n#### args: after-used\n\nExamples of **incorrect** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"after-used\" }]*/\n\n// 1 error\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\nExamples of **correct** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", {\"args\": \"after-used\"}]*/\n\n(function(foo, bar, baz) {\n    return baz;\n})();\n```\n\n#### args: all\n\nExamples of **incorrect** code for the `{ \"args\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"all\" }]*/\n\n// 2 errors\n// \"foo\" is defined but never used\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n#### args: none\n\nExamples of **correct** code for the `{ \"args\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"none\" }]*/\n\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n### ignoreRestSiblings\n\nThe `ignoreRestSiblings` option is a boolean (default: `false`). Using a [Rest Property](https://github.com/sebmarkbage/ecmascript-rest-spread) it is possible to \"omit\" properties from an object, but by default the sibling properties are marked as \"unused\". With this option enabled the rest property's siblings are ignored.\n\nExamples of **correct** code for the `{ \"ignoreRestSiblings\": true }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"ignoreRestSiblings\": true }]*/\n// 'type' is ignored because it has a rest property sibling.\nvar { type, ...coords } = data;\n```\n\n### argsIgnorePattern\n\nThe `argsIgnorePattern` option specifies exceptions not to check for usage: arguments whose names match a regexp pattern. For example, variables whose names begin with an underscore.\n\nExamples of **correct** code for the `{ \"argsIgnorePattern\": \"^_\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"^_\" }]*/\n\nfunction foo(x, _y) {\n    return x + 1;\n}\nfoo();\n```\n\n### caughtErrors\n\nThe `caughtErrors` option is used for `catch` block arguments validation.\n\nIt has two settings:\n\n* `none` - do not check error objects. This is the default setting.\n* `all` - all named arguments must be used.\n\n#### caughtErrors: none\n\nNot specifying this rule is equivalent of assigning it to `none`.\n\nExamples of **correct** code for the `{ \"caughtErrors\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"none\" }]*/\n\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n#### caughtErrors: all\n\nExamples of **incorrect** code for the `{ \"caughtErrors\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"all\" }]*/\n\n// 1 error\n// \"err\" is defined but never used\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n### caughtErrorsIgnorePattern\n\nThe `caughtErrorsIgnorePattern` option specifies exceptions not to check for usage: catch arguments whose names match a regexp pattern. For example, variables whose names begin with a string 'ignore'.\n\nExamples of **correct** code for the `{ \"caughtErrorsIgnorePattern\": \"^ignore\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrorsIgnorePattern\": \"^ignore\" }]*/\n\ntry {\n    //...\n} catch (ignoreErr) {\n    console.error(\"errors\");\n}\n```\n\n\n## When Not To Use It\n\nIf you don't want to be notified about unused variables or function arguments, you can safely turn this rule off.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":28,"column":7},"end":{"line":28,"column":7}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"db397e45f86784bd3557be9e70089f42","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-unused-vars","description":"'noFailover' is assigned a value but never used.","content":{"body":"# Disallow Unused Variables (no-unused-vars)\n\nVariables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.\n\n## Rule Details\n\nThis rule is aimed at eliminating unused variables, functions, and parameters of functions.\n\nA variable is considered to be used if any of the following are true:\n\n* It represents a function that is called (`doSomething()`)\n* It is read (`var y = x`)\n* It is passed into a function as an argument (`doSomething(x)`)\n* It is read inside of a function that is passed to another function (`doSomething(function() { foo(); })`)\n\nA variable is *not* considered to be used if it is only ever assigned to (`var x = 5`) or declared.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n/*global some_unused_var*/\n\n// It checks variables you have defined as global\nsome_unused_var = 42;\n\nvar x;\n\n// Write-only variables are not considered as used.\nvar y = 10;\ny = 5;\n\n// A read for a modification of itself is not considered as used.\nvar z = 0;\nz = z + 1;\n\n// By default, unused arguments cause warnings.\n(function(foo) {\n    return 5;\n})();\n\n// Unused recursive functions also cause warnings.\nfunction fact(n) {\n    if (n < 2) return 1;\n    return n * fact(n - 1);\n}\n\n// When a function definition destructures an array, unused entries from the array also cause warnings.\nfunction getY([x, y]) {\n    return y;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n\nvar x = 10;\nalert(x);\n\n// foo is considered used here\nmyFunc(function foo() {\n    // ...\n}.bind(this));\n\n(function(foo) {\n    return foo;\n})();\n\nvar myFunc;\nmyFunc = setTimeout(function() {\n    // myFunc is considered used\n    myFunc();\n}, 50);\n\n// Only the second argument from the descructured array is used.\nfunction getY([, y]) {\n    return y;\n}\n```\n\n### exported\n\nIn environments outside of CommonJS or ECMAScript modules, you may use `var` to create a global variable that may be used by other scripts. You can use the `/* exported variableName */` comment block to indicate that this variable is being exported and therefore should not be considered unused.\n\nNote that `/* exported */` has no effect for any of the following:\n\n* when the environment is `node` or `commonjs`\n* when `parserOptions.sourceType` is `module`\n* when `ecmaFeatures.globalReturn` is `true`\n\nThe line comment `// exported variableName` will not work as `exported` is not line-specific.\n\nExamples of **correct** code for `/* exported variableName */` operation:\n\n```js\n/* exported global_var */\n\nvar global_var = 42;\n```\n\n## Options\n\nThis rule takes one argument which can be a string or an object. The string settings are the same as those of the `vars` property (explained below).\n\nBy default this rule is enabled with `all` option for variables and `after-used` for arguments.\n\n```json\n{\n    \"rules\": {\n        \"no-unused-vars\": [\"error\", { \"vars\": \"all\", \"args\": \"after-used\", \"ignoreRestSiblings\": false }]\n    }\n}\n```\n\n### vars\n\nThe `vars` option has two settings:\n\n* `all` checks all variables for usage, including those in the global scope. This is the default setting.\n* `local` checks only that locally-declared variables are used but will allow global variables to be unused.\n\n#### vars: local\n\nExamples of **correct** code for the `{ \"vars\": \"local\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }]*/\n/*global some_unused_var */\n\nsome_unused_var = 42;\n```\n\n### varsIgnorePattern\n\nThe `varsIgnorePattern` option specifies exceptions not to check for usage: variables whose names match a regexp pattern. For example, variables whose names contain `ignored` or `Ignored`.\n\nExamples of **correct** code for the `{ \"varsIgnorePattern\": \"[iI]gnored\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"[iI]gnored\" }]*/\n\nvar firstVarIgnored = 1;\nvar secondVar = 2;\nconsole.log(secondVar);\n```\n\n### args\n\nThe `args` option has three settings:\n\n* `after-used` - only the last argument must be used. This allows you, for instance, to have two named parameters to a function and as long as you use the second argument, ESLint will not warn you about the first. This is the default setting.\n* `all` - all named arguments must be used.\n* `none` - do not check arguments.\n\n#### args: after-used\n\nExamples of **incorrect** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"after-used\" }]*/\n\n// 1 error\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\nExamples of **correct** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", {\"args\": \"after-used\"}]*/\n\n(function(foo, bar, baz) {\n    return baz;\n})();\n```\n\n#### args: all\n\nExamples of **incorrect** code for the `{ \"args\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"all\" }]*/\n\n// 2 errors\n// \"foo\" is defined but never used\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n#### args: none\n\nExamples of **correct** code for the `{ \"args\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"none\" }]*/\n\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n### ignoreRestSiblings\n\nThe `ignoreRestSiblings` option is a boolean (default: `false`). Using a [Rest Property](https://github.com/sebmarkbage/ecmascript-rest-spread) it is possible to \"omit\" properties from an object, but by default the sibling properties are marked as \"unused\". With this option enabled the rest property's siblings are ignored.\n\nExamples of **correct** code for the `{ \"ignoreRestSiblings\": true }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"ignoreRestSiblings\": true }]*/\n// 'type' is ignored because it has a rest property sibling.\nvar { type, ...coords } = data;\n```\n\n### argsIgnorePattern\n\nThe `argsIgnorePattern` option specifies exceptions not to check for usage: arguments whose names match a regexp pattern. For example, variables whose names begin with an underscore.\n\nExamples of **correct** code for the `{ \"argsIgnorePattern\": \"^_\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"^_\" }]*/\n\nfunction foo(x, _y) {\n    return x + 1;\n}\nfoo();\n```\n\n### caughtErrors\n\nThe `caughtErrors` option is used for `catch` block arguments validation.\n\nIt has two settings:\n\n* `none` - do not check error objects. This is the default setting.\n* `all` - all named arguments must be used.\n\n#### caughtErrors: none\n\nNot specifying this rule is equivalent of assigning it to `none`.\n\nExamples of **correct** code for the `{ \"caughtErrors\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"none\" }]*/\n\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n#### caughtErrors: all\n\nExamples of **incorrect** code for the `{ \"caughtErrors\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"all\" }]*/\n\n// 1 error\n// \"err\" is defined but never used\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n### caughtErrorsIgnorePattern\n\nThe `caughtErrorsIgnorePattern` option specifies exceptions not to check for usage: catch arguments whose names match a regexp pattern. For example, variables whose names begin with a string 'ignore'.\n\nExamples of **correct** code for the `{ \"caughtErrorsIgnorePattern\": \"^ignore\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrorsIgnorePattern\": \"^ignore\" }]*/\n\ntry {\n    //...\n} catch (ignoreErr) {\n    console.error(\"errors\");\n}\n```\n\n\n## When Not To Use It\n\nIf you don't want to be notified about unused variables or function arguments, you can safely turn this rule off.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":29,"column":7},"end":{"line":29,"column":7}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"55c928c4431b257fefc1dd6cb7823fa8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-unused-vars","description":"'tokenResField' is assigned a value but never used.","content":{"body":"# Disallow Unused Variables (no-unused-vars)\n\nVariables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.\n\n## Rule Details\n\nThis rule is aimed at eliminating unused variables, functions, and parameters of functions.\n\nA variable is considered to be used if any of the following are true:\n\n* It represents a function that is called (`doSomething()`)\n* It is read (`var y = x`)\n* It is passed into a function as an argument (`doSomething(x)`)\n* It is read inside of a function that is passed to another function (`doSomething(function() { foo(); })`)\n\nA variable is *not* considered to be used if it is only ever assigned to (`var x = 5`) or declared.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n/*global some_unused_var*/\n\n// It checks variables you have defined as global\nsome_unused_var = 42;\n\nvar x;\n\n// Write-only variables are not considered as used.\nvar y = 10;\ny = 5;\n\n// A read for a modification of itself is not considered as used.\nvar z = 0;\nz = z + 1;\n\n// By default, unused arguments cause warnings.\n(function(foo) {\n    return 5;\n})();\n\n// Unused recursive functions also cause warnings.\nfunction fact(n) {\n    if (n < 2) return 1;\n    return n * fact(n - 1);\n}\n\n// When a function definition destructures an array, unused entries from the array also cause warnings.\nfunction getY([x, y]) {\n    return y;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n\nvar x = 10;\nalert(x);\n\n// foo is considered used here\nmyFunc(function foo() {\n    // ...\n}.bind(this));\n\n(function(foo) {\n    return foo;\n})();\n\nvar myFunc;\nmyFunc = setTimeout(function() {\n    // myFunc is considered used\n    myFunc();\n}, 50);\n\n// Only the second argument from the descructured array is used.\nfunction getY([, y]) {\n    return y;\n}\n```\n\n### exported\n\nIn environments outside of CommonJS or ECMAScript modules, you may use `var` to create a global variable that may be used by other scripts. You can use the `/* exported variableName */` comment block to indicate that this variable is being exported and therefore should not be considered unused.\n\nNote that `/* exported */` has no effect for any of the following:\n\n* when the environment is `node` or `commonjs`\n* when `parserOptions.sourceType` is `module`\n* when `ecmaFeatures.globalReturn` is `true`\n\nThe line comment `// exported variableName` will not work as `exported` is not line-specific.\n\nExamples of **correct** code for `/* exported variableName */` operation:\n\n```js\n/* exported global_var */\n\nvar global_var = 42;\n```\n\n## Options\n\nThis rule takes one argument which can be a string or an object. The string settings are the same as those of the `vars` property (explained below).\n\nBy default this rule is enabled with `all` option for variables and `after-used` for arguments.\n\n```json\n{\n    \"rules\": {\n        \"no-unused-vars\": [\"error\", { \"vars\": \"all\", \"args\": \"after-used\", \"ignoreRestSiblings\": false }]\n    }\n}\n```\n\n### vars\n\nThe `vars` option has two settings:\n\n* `all` checks all variables for usage, including those in the global scope. This is the default setting.\n* `local` checks only that locally-declared variables are used but will allow global variables to be unused.\n\n#### vars: local\n\nExamples of **correct** code for the `{ \"vars\": \"local\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }]*/\n/*global some_unused_var */\n\nsome_unused_var = 42;\n```\n\n### varsIgnorePattern\n\nThe `varsIgnorePattern` option specifies exceptions not to check for usage: variables whose names match a regexp pattern. For example, variables whose names contain `ignored` or `Ignored`.\n\nExamples of **correct** code for the `{ \"varsIgnorePattern\": \"[iI]gnored\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"[iI]gnored\" }]*/\n\nvar firstVarIgnored = 1;\nvar secondVar = 2;\nconsole.log(secondVar);\n```\n\n### args\n\nThe `args` option has three settings:\n\n* `after-used` - only the last argument must be used. This allows you, for instance, to have two named parameters to a function and as long as you use the second argument, ESLint will not warn you about the first. This is the default setting.\n* `all` - all named arguments must be used.\n* `none` - do not check arguments.\n\n#### args: after-used\n\nExamples of **incorrect** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"after-used\" }]*/\n\n// 1 error\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\nExamples of **correct** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", {\"args\": \"after-used\"}]*/\n\n(function(foo, bar, baz) {\n    return baz;\n})();\n```\n\n#### args: all\n\nExamples of **incorrect** code for the `{ \"args\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"all\" }]*/\n\n// 2 errors\n// \"foo\" is defined but never used\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n#### args: none\n\nExamples of **correct** code for the `{ \"args\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"none\" }]*/\n\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n### ignoreRestSiblings\n\nThe `ignoreRestSiblings` option is a boolean (default: `false`). Using a [Rest Property](https://github.com/sebmarkbage/ecmascript-rest-spread) it is possible to \"omit\" properties from an object, but by default the sibling properties are marked as \"unused\". With this option enabled the rest property's siblings are ignored.\n\nExamples of **correct** code for the `{ \"ignoreRestSiblings\": true }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"ignoreRestSiblings\": true }]*/\n// 'type' is ignored because it has a rest property sibling.\nvar { type, ...coords } = data;\n```\n\n### argsIgnorePattern\n\nThe `argsIgnorePattern` option specifies exceptions not to check for usage: arguments whose names match a regexp pattern. For example, variables whose names begin with an underscore.\n\nExamples of **correct** code for the `{ \"argsIgnorePattern\": \"^_\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"^_\" }]*/\n\nfunction foo(x, _y) {\n    return x + 1;\n}\nfoo();\n```\n\n### caughtErrors\n\nThe `caughtErrors` option is used for `catch` block arguments validation.\n\nIt has two settings:\n\n* `none` - do not check error objects. This is the default setting.\n* `all` - all named arguments must be used.\n\n#### caughtErrors: none\n\nNot specifying this rule is equivalent of assigning it to `none`.\n\nExamples of **correct** code for the `{ \"caughtErrors\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"none\" }]*/\n\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n#### caughtErrors: all\n\nExamples of **incorrect** code for the `{ \"caughtErrors\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"all\" }]*/\n\n// 1 error\n// \"err\" is defined but never used\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n### caughtErrorsIgnorePattern\n\nThe `caughtErrorsIgnorePattern` option specifies exceptions not to check for usage: catch arguments whose names match a regexp pattern. For example, variables whose names begin with a string 'ignore'.\n\nExamples of **correct** code for the `{ \"caughtErrorsIgnorePattern\": \"^ignore\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrorsIgnorePattern\": \"^ignore\" }]*/\n\ntry {\n    //...\n} catch (ignoreErr) {\n    console.error(\"errors\");\n}\n```\n\n\n## When Not To Use It\n\nIf you don't want to be notified about unused variables or function arguments, you can safely turn this rule off.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":47,"column":5},"end":{"line":47,"column":5}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"1e28569a3532f3a6745d796aa2479965","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-unused-vars","description":"'retHC2' is defined but never used.","content":{"body":"# Disallow Unused Variables (no-unused-vars)\n\nVariables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.\n\n## Rule Details\n\nThis rule is aimed at eliminating unused variables, functions, and parameters of functions.\n\nA variable is considered to be used if any of the following are true:\n\n* It represents a function that is called (`doSomething()`)\n* It is read (`var y = x`)\n* It is passed into a function as an argument (`doSomething(x)`)\n* It is read inside of a function that is passed to another function (`doSomething(function() { foo(); })`)\n\nA variable is *not* considered to be used if it is only ever assigned to (`var x = 5`) or declared.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n/*global some_unused_var*/\n\n// It checks variables you have defined as global\nsome_unused_var = 42;\n\nvar x;\n\n// Write-only variables are not considered as used.\nvar y = 10;\ny = 5;\n\n// A read for a modification of itself is not considered as used.\nvar z = 0;\nz = z + 1;\n\n// By default, unused arguments cause warnings.\n(function(foo) {\n    return 5;\n})();\n\n// Unused recursive functions also cause warnings.\nfunction fact(n) {\n    if (n < 2) return 1;\n    return n * fact(n - 1);\n}\n\n// When a function definition destructures an array, unused entries from the array also cause warnings.\nfunction getY([x, y]) {\n    return y;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n\nvar x = 10;\nalert(x);\n\n// foo is considered used here\nmyFunc(function foo() {\n    // ...\n}.bind(this));\n\n(function(foo) {\n    return foo;\n})();\n\nvar myFunc;\nmyFunc = setTimeout(function() {\n    // myFunc is considered used\n    myFunc();\n}, 50);\n\n// Only the second argument from the descructured array is used.\nfunction getY([, y]) {\n    return y;\n}\n```\n\n### exported\n\nIn environments outside of CommonJS or ECMAScript modules, you may use `var` to create a global variable that may be used by other scripts. You can use the `/* exported variableName */` comment block to indicate that this variable is being exported and therefore should not be considered unused.\n\nNote that `/* exported */` has no effect for any of the following:\n\n* when the environment is `node` or `commonjs`\n* when `parserOptions.sourceType` is `module`\n* when `ecmaFeatures.globalReturn` is `true`\n\nThe line comment `// exported variableName` will not work as `exported` is not line-specific.\n\nExamples of **correct** code for `/* exported variableName */` operation:\n\n```js\n/* exported global_var */\n\nvar global_var = 42;\n```\n\n## Options\n\nThis rule takes one argument which can be a string or an object. The string settings are the same as those of the `vars` property (explained below).\n\nBy default this rule is enabled with `all` option for variables and `after-used` for arguments.\n\n```json\n{\n    \"rules\": {\n        \"no-unused-vars\": [\"error\", { \"vars\": \"all\", \"args\": \"after-used\", \"ignoreRestSiblings\": false }]\n    }\n}\n```\n\n### vars\n\nThe `vars` option has two settings:\n\n* `all` checks all variables for usage, including those in the global scope. This is the default setting.\n* `local` checks only that locally-declared variables are used but will allow global variables to be unused.\n\n#### vars: local\n\nExamples of **correct** code for the `{ \"vars\": \"local\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }]*/\n/*global some_unused_var */\n\nsome_unused_var = 42;\n```\n\n### varsIgnorePattern\n\nThe `varsIgnorePattern` option specifies exceptions not to check for usage: variables whose names match a regexp pattern. For example, variables whose names contain `ignored` or `Ignored`.\n\nExamples of **correct** code for the `{ \"varsIgnorePattern\": \"[iI]gnored\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"[iI]gnored\" }]*/\n\nvar firstVarIgnored = 1;\nvar secondVar = 2;\nconsole.log(secondVar);\n```\n\n### args\n\nThe `args` option has three settings:\n\n* `after-used` - only the last argument must be used. This allows you, for instance, to have two named parameters to a function and as long as you use the second argument, ESLint will not warn you about the first. This is the default setting.\n* `all` - all named arguments must be used.\n* `none` - do not check arguments.\n\n#### args: after-used\n\nExamples of **incorrect** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"after-used\" }]*/\n\n// 1 error\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\nExamples of **correct** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", {\"args\": \"after-used\"}]*/\n\n(function(foo, bar, baz) {\n    return baz;\n})();\n```\n\n#### args: all\n\nExamples of **incorrect** code for the `{ \"args\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"all\" }]*/\n\n// 2 errors\n// \"foo\" is defined but never used\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n#### args: none\n\nExamples of **correct** code for the `{ \"args\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"none\" }]*/\n\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n### ignoreRestSiblings\n\nThe `ignoreRestSiblings` option is a boolean (default: `false`). Using a [Rest Property](https://github.com/sebmarkbage/ecmascript-rest-spread) it is possible to \"omit\" properties from an object, but by default the sibling properties are marked as \"unused\". With this option enabled the rest property's siblings are ignored.\n\nExamples of **correct** code for the `{ \"ignoreRestSiblings\": true }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"ignoreRestSiblings\": true }]*/\n// 'type' is ignored because it has a rest property sibling.\nvar { type, ...coords } = data;\n```\n\n### argsIgnorePattern\n\nThe `argsIgnorePattern` option specifies exceptions not to check for usage: arguments whose names match a regexp pattern. For example, variables whose names begin with an underscore.\n\nExamples of **correct** code for the `{ \"argsIgnorePattern\": \"^_\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"^_\" }]*/\n\nfunction foo(x, _y) {\n    return x + 1;\n}\nfoo();\n```\n\n### caughtErrors\n\nThe `caughtErrors` option is used for `catch` block arguments validation.\n\nIt has two settings:\n\n* `none` - do not check error objects. This is the default setting.\n* `all` - all named arguments must be used.\n\n#### caughtErrors: none\n\nNot specifying this rule is equivalent of assigning it to `none`.\n\nExamples of **correct** code for the `{ \"caughtErrors\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"none\" }]*/\n\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n#### caughtErrors: all\n\nExamples of **incorrect** code for the `{ \"caughtErrors\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"all\" }]*/\n\n// 1 error\n// \"err\" is defined but never used\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n### caughtErrorsIgnorePattern\n\nThe `caughtErrorsIgnorePattern` option specifies exceptions not to check for usage: catch arguments whose names match a regexp pattern. For example, variables whose names begin with a string 'ignore'.\n\nExamples of **correct** code for the `{ \"caughtErrorsIgnorePattern\": \"^ignore\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrorsIgnorePattern\": \"^ignore\" }]*/\n\ntry {\n    //...\n} catch (ignoreErr) {\n    console.error(\"errors\");\n}\n```\n\n\n## When Not To Use It\n\nIf you don't want to be notified about unused variables or function arguments, you can safely turn this rule off.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":188,"column":27},"end":{"line":188,"column":27}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"a61e30831d64154f247bedf290f9eba8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-unused-vars","description":"'retHC3' is defined but never used.","content":{"body":"# Disallow Unused Variables (no-unused-vars)\n\nVariables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.\n\n## Rule Details\n\nThis rule is aimed at eliminating unused variables, functions, and parameters of functions.\n\nA variable is considered to be used if any of the following are true:\n\n* It represents a function that is called (`doSomething()`)\n* It is read (`var y = x`)\n* It is passed into a function as an argument (`doSomething(x)`)\n* It is read inside of a function that is passed to another function (`doSomething(function() { foo(); })`)\n\nA variable is *not* considered to be used if it is only ever assigned to (`var x = 5`) or declared.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n/*global some_unused_var*/\n\n// It checks variables you have defined as global\nsome_unused_var = 42;\n\nvar x;\n\n// Write-only variables are not considered as used.\nvar y = 10;\ny = 5;\n\n// A read for a modification of itself is not considered as used.\nvar z = 0;\nz = z + 1;\n\n// By default, unused arguments cause warnings.\n(function(foo) {\n    return 5;\n})();\n\n// Unused recursive functions also cause warnings.\nfunction fact(n) {\n    if (n < 2) return 1;\n    return n * fact(n - 1);\n}\n\n// When a function definition destructures an array, unused entries from the array also cause warnings.\nfunction getY([x, y]) {\n    return y;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n\nvar x = 10;\nalert(x);\n\n// foo is considered used here\nmyFunc(function foo() {\n    // ...\n}.bind(this));\n\n(function(foo) {\n    return foo;\n})();\n\nvar myFunc;\nmyFunc = setTimeout(function() {\n    // myFunc is considered used\n    myFunc();\n}, 50);\n\n// Only the second argument from the descructured array is used.\nfunction getY([, y]) {\n    return y;\n}\n```\n\n### exported\n\nIn environments outside of CommonJS or ECMAScript modules, you may use `var` to create a global variable that may be used by other scripts. You can use the `/* exported variableName */` comment block to indicate that this variable is being exported and therefore should not be considered unused.\n\nNote that `/* exported */` has no effect for any of the following:\n\n* when the environment is `node` or `commonjs`\n* when `parserOptions.sourceType` is `module`\n* when `ecmaFeatures.globalReturn` is `true`\n\nThe line comment `// exported variableName` will not work as `exported` is not line-specific.\n\nExamples of **correct** code for `/* exported variableName */` operation:\n\n```js\n/* exported global_var */\n\nvar global_var = 42;\n```\n\n## Options\n\nThis rule takes one argument which can be a string or an object. The string settings are the same as those of the `vars` property (explained below).\n\nBy default this rule is enabled with `all` option for variables and `after-used` for arguments.\n\n```json\n{\n    \"rules\": {\n        \"no-unused-vars\": [\"error\", { \"vars\": \"all\", \"args\": \"after-used\", \"ignoreRestSiblings\": false }]\n    }\n}\n```\n\n### vars\n\nThe `vars` option has two settings:\n\n* `all` checks all variables for usage, including those in the global scope. This is the default setting.\n* `local` checks only that locally-declared variables are used but will allow global variables to be unused.\n\n#### vars: local\n\nExamples of **correct** code for the `{ \"vars\": \"local\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }]*/\n/*global some_unused_var */\n\nsome_unused_var = 42;\n```\n\n### varsIgnorePattern\n\nThe `varsIgnorePattern` option specifies exceptions not to check for usage: variables whose names match a regexp pattern. For example, variables whose names contain `ignored` or `Ignored`.\n\nExamples of **correct** code for the `{ \"varsIgnorePattern\": \"[iI]gnored\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"[iI]gnored\" }]*/\n\nvar firstVarIgnored = 1;\nvar secondVar = 2;\nconsole.log(secondVar);\n```\n\n### args\n\nThe `args` option has three settings:\n\n* `after-used` - only the last argument must be used. This allows you, for instance, to have two named parameters to a function and as long as you use the second argument, ESLint will not warn you about the first. This is the default setting.\n* `all` - all named arguments must be used.\n* `none` - do not check arguments.\n\n#### args: after-used\n\nExamples of **incorrect** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"after-used\" }]*/\n\n// 1 error\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\nExamples of **correct** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", {\"args\": \"after-used\"}]*/\n\n(function(foo, bar, baz) {\n    return baz;\n})();\n```\n\n#### args: all\n\nExamples of **incorrect** code for the `{ \"args\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"all\" }]*/\n\n// 2 errors\n// \"foo\" is defined but never used\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n#### args: none\n\nExamples of **correct** code for the `{ \"args\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"none\" }]*/\n\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n### ignoreRestSiblings\n\nThe `ignoreRestSiblings` option is a boolean (default: `false`). Using a [Rest Property](https://github.com/sebmarkbage/ecmascript-rest-spread) it is possible to \"omit\" properties from an object, but by default the sibling properties are marked as \"unused\". With this option enabled the rest property's siblings are ignored.\n\nExamples of **correct** code for the `{ \"ignoreRestSiblings\": true }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"ignoreRestSiblings\": true }]*/\n// 'type' is ignored because it has a rest property sibling.\nvar { type, ...coords } = data;\n```\n\n### argsIgnorePattern\n\nThe `argsIgnorePattern` option specifies exceptions not to check for usage: arguments whose names match a regexp pattern. For example, variables whose names begin with an underscore.\n\nExamples of **correct** code for the `{ \"argsIgnorePattern\": \"^_\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"^_\" }]*/\n\nfunction foo(x, _y) {\n    return x + 1;\n}\nfoo();\n```\n\n### caughtErrors\n\nThe `caughtErrors` option is used for `catch` block arguments validation.\n\nIt has two settings:\n\n* `none` - do not check error objects. This is the default setting.\n* `all` - all named arguments must be used.\n\n#### caughtErrors: none\n\nNot specifying this rule is equivalent of assigning it to `none`.\n\nExamples of **correct** code for the `{ \"caughtErrors\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"none\" }]*/\n\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n#### caughtErrors: all\n\nExamples of **incorrect** code for the `{ \"caughtErrors\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"all\" }]*/\n\n// 1 error\n// \"err\" is defined but never used\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n### caughtErrorsIgnorePattern\n\nThe `caughtErrorsIgnorePattern` option specifies exceptions not to check for usage: catch arguments whose names match a regexp pattern. For example, variables whose names begin with a string 'ignore'.\n\nExamples of **correct** code for the `{ \"caughtErrorsIgnorePattern\": \"^ignore\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrorsIgnorePattern\": \"^ignore\" }]*/\n\ntry {\n    //...\n} catch (ignoreErr) {\n    console.error(\"errors\");\n}\n```\n\n\n## When Not To Use It\n\nIf you don't want to be notified about unused variables or function arguments, you can safely turn this rule off.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":199,"column":25},"end":{"line":199,"column":25}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"a61e30831d64154f247bedf290f9eba8","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"prefer-destructuring","description":"Use object destructuring.","content":{"body":"# Prefer destructuring from arrays and objects (prefer-destructuring)\n\nWith JavaScript ES6, a new syntax was added for creating variables from an array index or object property, called [destructuring](#further-reading).  This rule enforces usage of destructuring instead of accessing a property through a member expression.\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n```javascript\n// With `array` enabled\nvar foo = array[0];\n\n// With `object` enabled\nvar foo = object.foo;\nvar foo = object['foo'];\n```\n\nExamples of **correct** code for this rule:\n\n```javascript\n// With `array` enabled\nvar [ foo ] = array;\nvar foo = array[someIndex];\n\n// With `object` enabled\nvar { foo } = object;\nvar foo = object.bar;\n```\n\n### Options\n\nThis rule takes two sets of configuration objects; the first controls the types that the rule is applied to, and the second controls the way those objects are evaluated.\n\nThe first has two properties, `array` and `object`, which can be used to turn on or off the destructuring requirement for each of those types independently.  By default, both are `true`.\n\nThe second has a single property, `enforceForRenamedProperties`, that controls whether or not the `object` destructuring rules are applied in cases where the variable requires the property being access to be renamed.\n\nExamples of **incorrect** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar foo = object.bar;\n```\n\nExamples of **correct** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar { bar: foo } = object;\n```\n\nAn example configuration, with the defaults filled in, looks like this:\n\n```json\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\n      \"array\": true,\n      \"object\": true\n    }, {\n      \"enforceForRenamedProperties\": false\n    }]\n  }\n}\n```\n\n## When Not To Use It\n\nIf you want to be able to access array indices or object properties directly, you can either configure the rule to your tastes or disable the rule entirely.\n\nAdditionally, if you intend to access large array indices directly, like:\n\n```javascript\nvar foo = array[100];\n```\n\nThen the `array` part of this rule is not recommended, as destructuring does not match this use case very well.\n\n\n## Further Reading\n\nIf you want to learn more about destructuring, check out the links below:\n\n- [Destructuring Assignment (MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n- [Destructuring and parameter handling in ECMAScript 6 (2ality blog)](http://www.2ality.com/2015/01/es6-destructuring.html)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":248,"column":9},"end":{"line":248,"column":9}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"1cc4f0a913bdaa1a174db308ca4ef106","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"consistent-return","description":"Expected to return a value at the end of function 'makeRequest'.","content":{"body":"# require `return` statements to either always or never specify values (consistent-return)\n\nUnlike statically-typed languages which enforce that a function returns a specified type of value, JavaScript allows different code paths in a function to return different types of values.\n\nA confusing aspect of JavaScript is that a function returns `undefined` if any of the following are true:\n\n* it does not execute a `return` statement before it exits\n* it executes `return` which does not specify a value explicitly\n* it executes `return undefined`\n* it executes `return void` followed by an expression (for example, a function call)\n* it executes `return` followed by any other expression which evaluates to `undefined`\n\nIf any code paths in a function return a value explicitly but some code path do not return a value explicitly, it might be a typing mistake, especially in a large function. In the following example:\n\n* a code path through the function returns a Boolean value `true`\n* another code path does not return a value explicitly, therefore returns `undefined` implicitly\n\n```js\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n```\n\n## Rule Details\n\nThis rule requires `return` statements to either always or never specify values. This rule ignores function definitions where the name begins with an uppercase letter, because constructors (when invoked with the `new` operator) return the instantiated object implicitly if they do not return another object explicitly.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction Foo() {\n    if (!(this instanceof Foo)) {\n        return new Foo();\n    }\n\n    this.a = 0;\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"treatUndefinedAsUnspecified\": false` (default) always either specify values or return `undefined` implicitly only.\n* `\"treatUndefinedAsUnspecified\": true` always either specify values or return `undefined` explicitly or implicitly.\n\n### treatUndefinedAsUnspecified\n\nExamples of **incorrect** code for this rule with the default `{ \"treatUndefinedAsUnspecified\": false }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": false }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    return true;\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    return true;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\n## When Not To Use It\n\nIf you want to allow functions to have different `return` behavior depending on code branching, then it is safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":340,"column":10},"end":{"line":340,"column":10}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"b198451f3d995212ac9f2724be2eaa26","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 357 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":357,"column":1},"end":{"line":357,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-unused-vars","description":"'retH2' is defined but never used.","content":{"body":"# Disallow Unused Variables (no-unused-vars)\n\nVariables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.\n\n## Rule Details\n\nThis rule is aimed at eliminating unused variables, functions, and parameters of functions.\n\nA variable is considered to be used if any of the following are true:\n\n* It represents a function that is called (`doSomething()`)\n* It is read (`var y = x`)\n* It is passed into a function as an argument (`doSomething(x)`)\n* It is read inside of a function that is passed to another function (`doSomething(function() { foo(); })`)\n\nA variable is *not* considered to be used if it is only ever assigned to (`var x = 5`) or declared.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n/*global some_unused_var*/\n\n// It checks variables you have defined as global\nsome_unused_var = 42;\n\nvar x;\n\n// Write-only variables are not considered as used.\nvar y = 10;\ny = 5;\n\n// A read for a modification of itself is not considered as used.\nvar z = 0;\nz = z + 1;\n\n// By default, unused arguments cause warnings.\n(function(foo) {\n    return 5;\n})();\n\n// Unused recursive functions also cause warnings.\nfunction fact(n) {\n    if (n < 2) return 1;\n    return n * fact(n - 1);\n}\n\n// When a function definition destructures an array, unused entries from the array also cause warnings.\nfunction getY([x, y]) {\n    return y;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n\nvar x = 10;\nalert(x);\n\n// foo is considered used here\nmyFunc(function foo() {\n    // ...\n}.bind(this));\n\n(function(foo) {\n    return foo;\n})();\n\nvar myFunc;\nmyFunc = setTimeout(function() {\n    // myFunc is considered used\n    myFunc();\n}, 50);\n\n// Only the second argument from the descructured array is used.\nfunction getY([, y]) {\n    return y;\n}\n```\n\n### exported\n\nIn environments outside of CommonJS or ECMAScript modules, you may use `var` to create a global variable that may be used by other scripts. You can use the `/* exported variableName */` comment block to indicate that this variable is being exported and therefore should not be considered unused.\n\nNote that `/* exported */` has no effect for any of the following:\n\n* when the environment is `node` or `commonjs`\n* when `parserOptions.sourceType` is `module`\n* when `ecmaFeatures.globalReturn` is `true`\n\nThe line comment `// exported variableName` will not work as `exported` is not line-specific.\n\nExamples of **correct** code for `/* exported variableName */` operation:\n\n```js\n/* exported global_var */\n\nvar global_var = 42;\n```\n\n## Options\n\nThis rule takes one argument which can be a string or an object. The string settings are the same as those of the `vars` property (explained below).\n\nBy default this rule is enabled with `all` option for variables and `after-used` for arguments.\n\n```json\n{\n    \"rules\": {\n        \"no-unused-vars\": [\"error\", { \"vars\": \"all\", \"args\": \"after-used\", \"ignoreRestSiblings\": false }]\n    }\n}\n```\n\n### vars\n\nThe `vars` option has two settings:\n\n* `all` checks all variables for usage, including those in the global scope. This is the default setting.\n* `local` checks only that locally-declared variables are used but will allow global variables to be unused.\n\n#### vars: local\n\nExamples of **correct** code for the `{ \"vars\": \"local\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }]*/\n/*global some_unused_var */\n\nsome_unused_var = 42;\n```\n\n### varsIgnorePattern\n\nThe `varsIgnorePattern` option specifies exceptions not to check for usage: variables whose names match a regexp pattern. For example, variables whose names contain `ignored` or `Ignored`.\n\nExamples of **correct** code for the `{ \"varsIgnorePattern\": \"[iI]gnored\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"[iI]gnored\" }]*/\n\nvar firstVarIgnored = 1;\nvar secondVar = 2;\nconsole.log(secondVar);\n```\n\n### args\n\nThe `args` option has three settings:\n\n* `after-used` - only the last argument must be used. This allows you, for instance, to have two named parameters to a function and as long as you use the second argument, ESLint will not warn you about the first. This is the default setting.\n* `all` - all named arguments must be used.\n* `none` - do not check arguments.\n\n#### args: after-used\n\nExamples of **incorrect** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"after-used\" }]*/\n\n// 1 error\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\nExamples of **correct** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", {\"args\": \"after-used\"}]*/\n\n(function(foo, bar, baz) {\n    return baz;\n})();\n```\n\n#### args: all\n\nExamples of **incorrect** code for the `{ \"args\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"all\" }]*/\n\n// 2 errors\n// \"foo\" is defined but never used\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n#### args: none\n\nExamples of **correct** code for the `{ \"args\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"none\" }]*/\n\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n### ignoreRestSiblings\n\nThe `ignoreRestSiblings` option is a boolean (default: `false`). Using a [Rest Property](https://github.com/sebmarkbage/ecmascript-rest-spread) it is possible to \"omit\" properties from an object, but by default the sibling properties are marked as \"unused\". With this option enabled the rest property's siblings are ignored.\n\nExamples of **correct** code for the `{ \"ignoreRestSiblings\": true }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"ignoreRestSiblings\": true }]*/\n// 'type' is ignored because it has a rest property sibling.\nvar { type, ...coords } = data;\n```\n\n### argsIgnorePattern\n\nThe `argsIgnorePattern` option specifies exceptions not to check for usage: arguments whose names match a regexp pattern. For example, variables whose names begin with an underscore.\n\nExamples of **correct** code for the `{ \"argsIgnorePattern\": \"^_\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"^_\" }]*/\n\nfunction foo(x, _y) {\n    return x + 1;\n}\nfoo();\n```\n\n### caughtErrors\n\nThe `caughtErrors` option is used for `catch` block arguments validation.\n\nIt has two settings:\n\n* `none` - do not check error objects. This is the default setting.\n* `all` - all named arguments must be used.\n\n#### caughtErrors: none\n\nNot specifying this rule is equivalent of assigning it to `none`.\n\nExamples of **correct** code for the `{ \"caughtErrors\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"none\" }]*/\n\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n#### caughtErrors: all\n\nExamples of **incorrect** code for the `{ \"caughtErrors\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"all\" }]*/\n\n// 1 error\n// \"err\" is defined but never used\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n### caughtErrorsIgnorePattern\n\nThe `caughtErrorsIgnorePattern` option specifies exceptions not to check for usage: catch arguments whose names match a regexp pattern. For example, variables whose names begin with a string 'ignore'.\n\nExamples of **correct** code for the `{ \"caughtErrorsIgnorePattern\": \"^ignore\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrorsIgnorePattern\": \"^ignore\" }]*/\n\ntry {\n    //...\n} catch (ignoreErr) {\n    console.error(\"errors\");\n}\n```\n\n\n## When Not To Use It\n\nIf you don't want to be notified about unused variables or function arguments, you can safely turn this rule off.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":396,"column":13},"end":{"line":396,"column":13}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"a61e30831d64154f247bedf290f9eba8","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-unused-vars","description":"'retH2' is defined but never used.","content":{"body":"# Disallow Unused Variables (no-unused-vars)\n\nVariables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.\n\n## Rule Details\n\nThis rule is aimed at eliminating unused variables, functions, and parameters of functions.\n\nA variable is considered to be used if any of the following are true:\n\n* It represents a function that is called (`doSomething()`)\n* It is read (`var y = x`)\n* It is passed into a function as an argument (`doSomething(x)`)\n* It is read inside of a function that is passed to another function (`doSomething(function() { foo(); })`)\n\nA variable is *not* considered to be used if it is only ever assigned to (`var x = 5`) or declared.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n/*global some_unused_var*/\n\n// It checks variables you have defined as global\nsome_unused_var = 42;\n\nvar x;\n\n// Write-only variables are not considered as used.\nvar y = 10;\ny = 5;\n\n// A read for a modification of itself is not considered as used.\nvar z = 0;\nz = z + 1;\n\n// By default, unused arguments cause warnings.\n(function(foo) {\n    return 5;\n})();\n\n// Unused recursive functions also cause warnings.\nfunction fact(n) {\n    if (n < 2) return 1;\n    return n * fact(n - 1);\n}\n\n// When a function definition destructures an array, unused entries from the array also cause warnings.\nfunction getY([x, y]) {\n    return y;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n\nvar x = 10;\nalert(x);\n\n// foo is considered used here\nmyFunc(function foo() {\n    // ...\n}.bind(this));\n\n(function(foo) {\n    return foo;\n})();\n\nvar myFunc;\nmyFunc = setTimeout(function() {\n    // myFunc is considered used\n    myFunc();\n}, 50);\n\n// Only the second argument from the descructured array is used.\nfunction getY([, y]) {\n    return y;\n}\n```\n\n### exported\n\nIn environments outside of CommonJS or ECMAScript modules, you may use `var` to create a global variable that may be used by other scripts. You can use the `/* exported variableName */` comment block to indicate that this variable is being exported and therefore should not be considered unused.\n\nNote that `/* exported */` has no effect for any of the following:\n\n* when the environment is `node` or `commonjs`\n* when `parserOptions.sourceType` is `module`\n* when `ecmaFeatures.globalReturn` is `true`\n\nThe line comment `// exported variableName` will not work as `exported` is not line-specific.\n\nExamples of **correct** code for `/* exported variableName */` operation:\n\n```js\n/* exported global_var */\n\nvar global_var = 42;\n```\n\n## Options\n\nThis rule takes one argument which can be a string or an object. The string settings are the same as those of the `vars` property (explained below).\n\nBy default this rule is enabled with `all` option for variables and `after-used` for arguments.\n\n```json\n{\n    \"rules\": {\n        \"no-unused-vars\": [\"error\", { \"vars\": \"all\", \"args\": \"after-used\", \"ignoreRestSiblings\": false }]\n    }\n}\n```\n\n### vars\n\nThe `vars` option has two settings:\n\n* `all` checks all variables for usage, including those in the global scope. This is the default setting.\n* `local` checks only that locally-declared variables are used but will allow global variables to be unused.\n\n#### vars: local\n\nExamples of **correct** code for the `{ \"vars\": \"local\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }]*/\n/*global some_unused_var */\n\nsome_unused_var = 42;\n```\n\n### varsIgnorePattern\n\nThe `varsIgnorePattern` option specifies exceptions not to check for usage: variables whose names match a regexp pattern. For example, variables whose names contain `ignored` or `Ignored`.\n\nExamples of **correct** code for the `{ \"varsIgnorePattern\": \"[iI]gnored\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"[iI]gnored\" }]*/\n\nvar firstVarIgnored = 1;\nvar secondVar = 2;\nconsole.log(secondVar);\n```\n\n### args\n\nThe `args` option has three settings:\n\n* `after-used` - only the last argument must be used. This allows you, for instance, to have two named parameters to a function and as long as you use the second argument, ESLint will not warn you about the first. This is the default setting.\n* `all` - all named arguments must be used.\n* `none` - do not check arguments.\n\n#### args: after-used\n\nExamples of **incorrect** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"after-used\" }]*/\n\n// 1 error\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\nExamples of **correct** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", {\"args\": \"after-used\"}]*/\n\n(function(foo, bar, baz) {\n    return baz;\n})();\n```\n\n#### args: all\n\nExamples of **incorrect** code for the `{ \"args\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"all\" }]*/\n\n// 2 errors\n// \"foo\" is defined but never used\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n#### args: none\n\nExamples of **correct** code for the `{ \"args\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"none\" }]*/\n\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n### ignoreRestSiblings\n\nThe `ignoreRestSiblings` option is a boolean (default: `false`). Using a [Rest Property](https://github.com/sebmarkbage/ecmascript-rest-spread) it is possible to \"omit\" properties from an object, but by default the sibling properties are marked as \"unused\". With this option enabled the rest property's siblings are ignored.\n\nExamples of **correct** code for the `{ \"ignoreRestSiblings\": true }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"ignoreRestSiblings\": true }]*/\n// 'type' is ignored because it has a rest property sibling.\nvar { type, ...coords } = data;\n```\n\n### argsIgnorePattern\n\nThe `argsIgnorePattern` option specifies exceptions not to check for usage: arguments whose names match a regexp pattern. For example, variables whose names begin with an underscore.\n\nExamples of **correct** code for the `{ \"argsIgnorePattern\": \"^_\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"^_\" }]*/\n\nfunction foo(x, _y) {\n    return x + 1;\n}\nfoo();\n```\n\n### caughtErrors\n\nThe `caughtErrors` option is used for `catch` block arguments validation.\n\nIt has two settings:\n\n* `none` - do not check error objects. This is the default setting.\n* `all` - all named arguments must be used.\n\n#### caughtErrors: none\n\nNot specifying this rule is equivalent of assigning it to `none`.\n\nExamples of **correct** code for the `{ \"caughtErrors\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"none\" }]*/\n\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n#### caughtErrors: all\n\nExamples of **incorrect** code for the `{ \"caughtErrors\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"all\" }]*/\n\n// 1 error\n// \"err\" is defined but never used\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n### caughtErrorsIgnorePattern\n\nThe `caughtErrorsIgnorePattern` option specifies exceptions not to check for usage: catch arguments whose names match a regexp pattern. For example, variables whose names begin with a string 'ignore'.\n\nExamples of **correct** code for the `{ \"caughtErrorsIgnorePattern\": \"^ignore\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrorsIgnorePattern\": \"^ignore\" }]*/\n\ntry {\n    //...\n} catch (ignoreErr) {\n    console.error(\"errors\");\n}\n```\n\n\n## When Not To Use It\n\nIf you don't want to be notified about unused variables or function arguments, you can safely turn this rule off.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":416,"column":11},"end":{"line":416,"column":11}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"a61e30831d64154f247bedf290f9eba8","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"prefer-destructuring","description":"Use array destructuring.","content":{"body":"# Prefer destructuring from arrays and objects (prefer-destructuring)\n\nWith JavaScript ES6, a new syntax was added for creating variables from an array index or object property, called [destructuring](#further-reading).  This rule enforces usage of destructuring instead of accessing a property through a member expression.\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n```javascript\n// With `array` enabled\nvar foo = array[0];\n\n// With `object` enabled\nvar foo = object.foo;\nvar foo = object['foo'];\n```\n\nExamples of **correct** code for this rule:\n\n```javascript\n// With `array` enabled\nvar [ foo ] = array;\nvar foo = array[someIndex];\n\n// With `object` enabled\nvar { foo } = object;\nvar foo = object.bar;\n```\n\n### Options\n\nThis rule takes two sets of configuration objects; the first controls the types that the rule is applied to, and the second controls the way those objects are evaluated.\n\nThe first has two properties, `array` and `object`, which can be used to turn on or off the destructuring requirement for each of those types independently.  By default, both are `true`.\n\nThe second has a single property, `enforceForRenamedProperties`, that controls whether or not the `object` destructuring rules are applied in cases where the variable requires the property being access to be renamed.\n\nExamples of **incorrect** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar foo = object.bar;\n```\n\nExamples of **correct** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar { bar: foo } = object;\n```\n\nAn example configuration, with the defaults filled in, looks like this:\n\n```json\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\n      \"array\": true,\n      \"object\": true\n    }, {\n      \"enforceForRenamedProperties\": false\n    }]\n  }\n}\n```\n\n## When Not To Use It\n\nIf you want to be able to access array indices or object properties directly, you can either configure the rule to your tastes or disable the rule entirely.\n\nAdditionally, if you intend to access large array indices directly, like:\n\n```javascript\nvar foo = array[100];\n```\n\nThen the `array` part of this rule is not recommended, as destructuring does not match this use case very well.\n\n\n## Further Reading\n\nIf you want to learn more about destructuring, check out the links below:\n\n- [Destructuring Assignment (MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n- [Destructuring and parameter handling in ECMAScript 6 (2ality blog)](http://www.2ality.com/2015/01/es6-destructuring.html)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":610,"column":9},"end":{"line":610,"column":9}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d9f8a2b7db89525e9c9b29cec20f8c2f","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 614 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":614,"column":1},"end":{"line":614,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1137 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1137,"column":1},"end":{"line":1137,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1320 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1320,"column":1},"end":{"line":1320,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"f942aa509ed117c94c1dfb69d363026d","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1397 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1397,"column":1},"end":{"line":1397,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"f942aa509ed117c94c1dfb69d363026d","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1413 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1413,"column":1},"end":{"line":1413,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1423 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1423,"column":1},"end":{"line":1423,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1430 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1430,"column":1},"end":{"line":1430,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Compatibility"],"check_name":"no-use-before-define","description":"'handleInvalidToken' was used before it was defined.","content":{"body":"# Disallow Early Use (no-use-before-define)\n\nIn JavaScript, prior to ES6, variable and function declarations are hoisted to the top of a scope, so it's possible to use identifiers before their formal declarations in code. This can be confusing and some believe it is best to always declare variables and functions before using them.\n\nIn ES6, block-level bindings (`let` and `const`) introduce a \"temporal dead zone\" where a `ReferenceError` will be thrown with any attempt to access the variable before its declaration.\n\n## Rule Details\n\nThis rule will warn when it encounters a reference to an identifier that has not yet been declared.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-use-before-define: \"error\"*/\n/*eslint-env es6*/\n\nalert(a);\nvar a = 10;\n\nf();\nfunction f() {}\n\nfunction g() {\n    return b;\n}\nvar b = 1;\n\n// With blockBindings: true\n{\n    alert(c);\n    let c = 1;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-use-before-define: \"error\"*/\n/*eslint-env es6*/\n\nvar a;\na = 10;\nalert(a);\n\nfunction f() {}\nf(1);\n\nvar b = 1;\nfunction g() {\n    return b;\n}\n\n// With blockBindings: true\n{\n    let C;\n    c++;\n}\n```\n\n## Options\n\n```json\n{\n    \"no-use-before-define\": [\"error\", { \"functions\": true, \"classes\": true }]\n}\n```\n\n* `functions` (`boolean`) -\n  The flag which shows whether or not this rule checks function declarations.\n  If this is `true`, this rule warns every reference to a function before the function declaration.\n  Otherwise, ignores those references.\n  Function declarations are hoisted, so it's safe.\n  Default is `true`.\n* `classes` (`boolean`) -\n  The flag which shows whether or not this rule checks class declarations of upper scopes.\n  If this is `true`, this rule warns every reference to a class before the class declaration.\n  Otherwise, ignores those references if the declaration is in upper function scopes.\n  Class declarations are not hoisted, so it might be danger.\n  Default is `true`.\n* `variables` (`boolean`) -\n  This flag determines whether or not the rule checks variable declarations in upper scopes.\n  If this is `true`, the rule warns every reference to a variable before the variable declaration.\n  Otherwise, the rule ignores a reference if the declaration is in an upper scope, while still reporting the reference if it's in the same scope as the declaration.\n  Default is `true`.\n\nThis rule accepts `\"nofunc\"` string as an option.\n`\"nofunc\"` is the same as `{ \"functions\": false, \"classes\": true }`.\n\n### functions\n\nExamples of **correct** code for the `{ \"functions\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"functions\": false }]*/\n\nf();\nfunction f() {}\n```\n\n### classes\n\nExamples of **incorrect** code for the `{ \"classes\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"classes\": false }]*/\n/*eslint-env es6*/\n\nnew A();\nclass A {\n}\n```\n\nExamples of **correct** code for the `{ \"classes\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"classes\": false }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    return new A();\n}\n\nclass A {\n}\n```\n\n### variables\n\nExamples of **incorrect** code for the `{ \"variables\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"variables\": false }]*/\n\nconsole.log(foo);\nvar foo = 1;\n```\n\nExamples of **correct** code for the `{ \"variables\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"variables\": false }]*/\n\nfunction baz() {\n    console.log(foo);\n}\n\nvar foo = 1;\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1430,"column":16},"end":{"line":1430,"column":16}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"ec11fee74f1c82c5fa961ceb7dac84f9","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1437 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1437,"column":1},"end":{"line":1437,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1444 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1444,"column":1},"end":{"line":1444,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Compatibility"],"check_name":"no-use-before-define","description":"'handleLimitResponse' was used before it was defined.","content":{"body":"# Disallow Early Use (no-use-before-define)\n\nIn JavaScript, prior to ES6, variable and function declarations are hoisted to the top of a scope, so it's possible to use identifiers before their formal declarations in code. This can be confusing and some believe it is best to always declare variables and functions before using them.\n\nIn ES6, block-level bindings (`let` and `const`) introduce a \"temporal dead zone\" where a `ReferenceError` will be thrown with any attempt to access the variable before its declaration.\n\n## Rule Details\n\nThis rule will warn when it encounters a reference to an identifier that has not yet been declared.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-use-before-define: \"error\"*/\n/*eslint-env es6*/\n\nalert(a);\nvar a = 10;\n\nf();\nfunction f() {}\n\nfunction g() {\n    return b;\n}\nvar b = 1;\n\n// With blockBindings: true\n{\n    alert(c);\n    let c = 1;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-use-before-define: \"error\"*/\n/*eslint-env es6*/\n\nvar a;\na = 10;\nalert(a);\n\nfunction f() {}\nf(1);\n\nvar b = 1;\nfunction g() {\n    return b;\n}\n\n// With blockBindings: true\n{\n    let C;\n    c++;\n}\n```\n\n## Options\n\n```json\n{\n    \"no-use-before-define\": [\"error\", { \"functions\": true, \"classes\": true }]\n}\n```\n\n* `functions` (`boolean`) -\n  The flag which shows whether or not this rule checks function declarations.\n  If this is `true`, this rule warns every reference to a function before the function declaration.\n  Otherwise, ignores those references.\n  Function declarations are hoisted, so it's safe.\n  Default is `true`.\n* `classes` (`boolean`) -\n  The flag which shows whether or not this rule checks class declarations of upper scopes.\n  If this is `true`, this rule warns every reference to a class before the class declaration.\n  Otherwise, ignores those references if the declaration is in upper function scopes.\n  Class declarations are not hoisted, so it might be danger.\n  Default is `true`.\n* `variables` (`boolean`) -\n  This flag determines whether or not the rule checks variable declarations in upper scopes.\n  If this is `true`, the rule warns every reference to a variable before the variable declaration.\n  Otherwise, the rule ignores a reference if the declaration is in an upper scope, while still reporting the reference if it's in the same scope as the declaration.\n  Default is `true`.\n\nThis rule accepts `\"nofunc\"` string as an option.\n`\"nofunc\"` is the same as `{ \"functions\": false, \"classes\": true }`.\n\n### functions\n\nExamples of **correct** code for the `{ \"functions\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"functions\": false }]*/\n\nf();\nfunction f() {}\n```\n\n### classes\n\nExamples of **incorrect** code for the `{ \"classes\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"classes\": false }]*/\n/*eslint-env es6*/\n\nnew A();\nclass A {\n}\n```\n\nExamples of **correct** code for the `{ \"classes\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"classes\": false }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    return new A();\n}\n\nclass A {\n}\n```\n\n### variables\n\nExamples of **incorrect** code for the `{ \"variables\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"variables\": false }]*/\n\nconsole.log(foo);\nvar foo = 1;\n```\n\nExamples of **correct** code for the `{ \"variables\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"variables\": false }]*/\n\nfunction baz() {\n    console.log(foo);\n}\n\nvar foo = 1;\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1444,"column":16},"end":{"line":1444,"column":16}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"ec11fee74f1c82c5fa961ceb7dac84f9","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1449 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1449,"column":1},"end":{"line":1449,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1456 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1456,"column":1},"end":{"line":1456,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Compatibility"],"check_name":"no-use-before-define","description":"'handleAbortResponse' was used before it was defined.","content":{"body":"# Disallow Early Use (no-use-before-define)\n\nIn JavaScript, prior to ES6, variable and function declarations are hoisted to the top of a scope, so it's possible to use identifiers before their formal declarations in code. This can be confusing and some believe it is best to always declare variables and functions before using them.\n\nIn ES6, block-level bindings (`let` and `const`) introduce a \"temporal dead zone\" where a `ReferenceError` will be thrown with any attempt to access the variable before its declaration.\n\n## Rule Details\n\nThis rule will warn when it encounters a reference to an identifier that has not yet been declared.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-use-before-define: \"error\"*/\n/*eslint-env es6*/\n\nalert(a);\nvar a = 10;\n\nf();\nfunction f() {}\n\nfunction g() {\n    return b;\n}\nvar b = 1;\n\n// With blockBindings: true\n{\n    alert(c);\n    let c = 1;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-use-before-define: \"error\"*/\n/*eslint-env es6*/\n\nvar a;\na = 10;\nalert(a);\n\nfunction f() {}\nf(1);\n\nvar b = 1;\nfunction g() {\n    return b;\n}\n\n// With blockBindings: true\n{\n    let C;\n    c++;\n}\n```\n\n## Options\n\n```json\n{\n    \"no-use-before-define\": [\"error\", { \"functions\": true, \"classes\": true }]\n}\n```\n\n* `functions` (`boolean`) -\n  The flag which shows whether or not this rule checks function declarations.\n  If this is `true`, this rule warns every reference to a function before the function declaration.\n  Otherwise, ignores those references.\n  Function declarations are hoisted, so it's safe.\n  Default is `true`.\n* `classes` (`boolean`) -\n  The flag which shows whether or not this rule checks class declarations of upper scopes.\n  If this is `true`, this rule warns every reference to a class before the class declaration.\n  Otherwise, ignores those references if the declaration is in upper function scopes.\n  Class declarations are not hoisted, so it might be danger.\n  Default is `true`.\n* `variables` (`boolean`) -\n  This flag determines whether or not the rule checks variable declarations in upper scopes.\n  If this is `true`, the rule warns every reference to a variable before the variable declaration.\n  Otherwise, the rule ignores a reference if the declaration is in an upper scope, while still reporting the reference if it's in the same scope as the declaration.\n  Default is `true`.\n\nThis rule accepts `\"nofunc\"` string as an option.\n`\"nofunc\"` is the same as `{ \"functions\": false, \"classes\": true }`.\n\n### functions\n\nExamples of **correct** code for the `{ \"functions\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"functions\": false }]*/\n\nf();\nfunction f() {}\n```\n\n### classes\n\nExamples of **incorrect** code for the `{ \"classes\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"classes\": false }]*/\n/*eslint-env es6*/\n\nnew A();\nclass A {\n}\n```\n\nExamples of **correct** code for the `{ \"classes\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"classes\": false }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    return new A();\n}\n\nclass A {\n}\n```\n\n### variables\n\nExamples of **incorrect** code for the `{ \"variables\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"variables\": false }]*/\n\nconsole.log(foo);\nvar foo = 1;\n```\n\nExamples of **correct** code for the `{ \"variables\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"variables\": false }]*/\n\nfunction baz() {\n    console.log(foo);\n}\n\nvar foo = 1;\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1456,"column":14},"end":{"line":1456,"column":14}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"ec11fee74f1c82c5fa961ceb7dac84f9","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1468 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1468,"column":1},"end":{"line":1468,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"f942aa509ed117c94c1dfb69d363026d","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1479 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1479,"column":1},"end":{"line":1479,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1490 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1490,"column":1},"end":{"line":1490,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"f942aa509ed117c94c1dfb69d363026d","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"consistent-return","description":"Expected to return a value at the end of function 'handleLimitResponse'.","content":{"body":"# require `return` statements to either always or never specify values (consistent-return)\n\nUnlike statically-typed languages which enforce that a function returns a specified type of value, JavaScript allows different code paths in a function to return different types of values.\n\nA confusing aspect of JavaScript is that a function returns `undefined` if any of the following are true:\n\n* it does not execute a `return` statement before it exits\n* it executes `return` which does not specify a value explicitly\n* it executes `return undefined`\n* it executes `return void` followed by an expression (for example, a function call)\n* it executes `return` followed by any other expression which evaluates to `undefined`\n\nIf any code paths in a function return a value explicitly but some code path do not return a value explicitly, it might be a typing mistake, especially in a large function. In the following example:\n\n* a code path through the function returns a Boolean value `true`\n* another code path does not return a value explicitly, therefore returns `undefined` implicitly\n\n```js\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n```\n\n## Rule Details\n\nThis rule requires `return` statements to either always or never specify values. This rule ignores function definitions where the name begins with an uppercase letter, because constructors (when invoked with the `new` operator) return the instantiated object implicitly if they do not return another object explicitly.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction Foo() {\n    if (!(this instanceof Foo)) {\n        return new Foo();\n    }\n\n    this.a = 0;\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"treatUndefinedAsUnspecified\": false` (default) always either specify values or return `undefined` implicitly only.\n* `\"treatUndefinedAsUnspecified\": true` always either specify values or return `undefined` explicitly or implicitly.\n\n### treatUndefinedAsUnspecified\n\nExamples of **incorrect** code for this rule with the default `{ \"treatUndefinedAsUnspecified\": false }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": false }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    return true;\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    return true;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\n## When Not To Use It\n\nIf you want to allow functions to have different `return` behavior depending on code branching, then it is safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1490,"column":10},"end":{"line":1490,"column":10}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"893a169a736ef60681caf2b832246d98","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-unused-vars","description":"'timeoutObject' is assigned a value but never used.","content":{"body":"# Disallow Unused Variables (no-unused-vars)\n\nVariables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.\n\n## Rule Details\n\nThis rule is aimed at eliminating unused variables, functions, and parameters of functions.\n\nA variable is considered to be used if any of the following are true:\n\n* It represents a function that is called (`doSomething()`)\n* It is read (`var y = x`)\n* It is passed into a function as an argument (`doSomething(x)`)\n* It is read inside of a function that is passed to another function (`doSomething(function() { foo(); })`)\n\nA variable is *not* considered to be used if it is only ever assigned to (`var x = 5`) or declared.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n/*global some_unused_var*/\n\n// It checks variables you have defined as global\nsome_unused_var = 42;\n\nvar x;\n\n// Write-only variables are not considered as used.\nvar y = 10;\ny = 5;\n\n// A read for a modification of itself is not considered as used.\nvar z = 0;\nz = z + 1;\n\n// By default, unused arguments cause warnings.\n(function(foo) {\n    return 5;\n})();\n\n// Unused recursive functions also cause warnings.\nfunction fact(n) {\n    if (n < 2) return 1;\n    return n * fact(n - 1);\n}\n\n// When a function definition destructures an array, unused entries from the array also cause warnings.\nfunction getY([x, y]) {\n    return y;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n\nvar x = 10;\nalert(x);\n\n// foo is considered used here\nmyFunc(function foo() {\n    // ...\n}.bind(this));\n\n(function(foo) {\n    return foo;\n})();\n\nvar myFunc;\nmyFunc = setTimeout(function() {\n    // myFunc is considered used\n    myFunc();\n}, 50);\n\n// Only the second argument from the descructured array is used.\nfunction getY([, y]) {\n    return y;\n}\n```\n\n### exported\n\nIn environments outside of CommonJS or ECMAScript modules, you may use `var` to create a global variable that may be used by other scripts. You can use the `/* exported variableName */` comment block to indicate that this variable is being exported and therefore should not be considered unused.\n\nNote that `/* exported */` has no effect for any of the following:\n\n* when the environment is `node` or `commonjs`\n* when `parserOptions.sourceType` is `module`\n* when `ecmaFeatures.globalReturn` is `true`\n\nThe line comment `// exported variableName` will not work as `exported` is not line-specific.\n\nExamples of **correct** code for `/* exported variableName */` operation:\n\n```js\n/* exported global_var */\n\nvar global_var = 42;\n```\n\n## Options\n\nThis rule takes one argument which can be a string or an object. The string settings are the same as those of the `vars` property (explained below).\n\nBy default this rule is enabled with `all` option for variables and `after-used` for arguments.\n\n```json\n{\n    \"rules\": {\n        \"no-unused-vars\": [\"error\", { \"vars\": \"all\", \"args\": \"after-used\", \"ignoreRestSiblings\": false }]\n    }\n}\n```\n\n### vars\n\nThe `vars` option has two settings:\n\n* `all` checks all variables for usage, including those in the global scope. This is the default setting.\n* `local` checks only that locally-declared variables are used but will allow global variables to be unused.\n\n#### vars: local\n\nExamples of **correct** code for the `{ \"vars\": \"local\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }]*/\n/*global some_unused_var */\n\nsome_unused_var = 42;\n```\n\n### varsIgnorePattern\n\nThe `varsIgnorePattern` option specifies exceptions not to check for usage: variables whose names match a regexp pattern. For example, variables whose names contain `ignored` or `Ignored`.\n\nExamples of **correct** code for the `{ \"varsIgnorePattern\": \"[iI]gnored\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"[iI]gnored\" }]*/\n\nvar firstVarIgnored = 1;\nvar secondVar = 2;\nconsole.log(secondVar);\n```\n\n### args\n\nThe `args` option has three settings:\n\n* `after-used` - only the last argument must be used. This allows you, for instance, to have two named parameters to a function and as long as you use the second argument, ESLint will not warn you about the first. This is the default setting.\n* `all` - all named arguments must be used.\n* `none` - do not check arguments.\n\n#### args: after-used\n\nExamples of **incorrect** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"after-used\" }]*/\n\n// 1 error\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\nExamples of **correct** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", {\"args\": \"after-used\"}]*/\n\n(function(foo, bar, baz) {\n    return baz;\n})();\n```\n\n#### args: all\n\nExamples of **incorrect** code for the `{ \"args\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"all\" }]*/\n\n// 2 errors\n// \"foo\" is defined but never used\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n#### args: none\n\nExamples of **correct** code for the `{ \"args\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"none\" }]*/\n\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n### ignoreRestSiblings\n\nThe `ignoreRestSiblings` option is a boolean (default: `false`). Using a [Rest Property](https://github.com/sebmarkbage/ecmascript-rest-spread) it is possible to \"omit\" properties from an object, but by default the sibling properties are marked as \"unused\". With this option enabled the rest property's siblings are ignored.\n\nExamples of **correct** code for the `{ \"ignoreRestSiblings\": true }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"ignoreRestSiblings\": true }]*/\n// 'type' is ignored because it has a rest property sibling.\nvar { type, ...coords } = data;\n```\n\n### argsIgnorePattern\n\nThe `argsIgnorePattern` option specifies exceptions not to check for usage: arguments whose names match a regexp pattern. For example, variables whose names begin with an underscore.\n\nExamples of **correct** code for the `{ \"argsIgnorePattern\": \"^_\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"^_\" }]*/\n\nfunction foo(x, _y) {\n    return x + 1;\n}\nfoo();\n```\n\n### caughtErrors\n\nThe `caughtErrors` option is used for `catch` block arguments validation.\n\nIt has two settings:\n\n* `none` - do not check error objects. This is the default setting.\n* `all` - all named arguments must be used.\n\n#### caughtErrors: none\n\nNot specifying this rule is equivalent of assigning it to `none`.\n\nExamples of **correct** code for the `{ \"caughtErrors\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"none\" }]*/\n\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n#### caughtErrors: all\n\nExamples of **incorrect** code for the `{ \"caughtErrors\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"all\" }]*/\n\n// 1 error\n// \"err\" is defined but never used\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n### caughtErrorsIgnorePattern\n\nThe `caughtErrorsIgnorePattern` option specifies exceptions not to check for usage: catch arguments whose names match a regexp pattern. For example, variables whose names begin with a string 'ignore'.\n\nExamples of **correct** code for the `{ \"caughtErrorsIgnorePattern\": \"^ignore\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrorsIgnorePattern\": \"^ignore\" }]*/\n\ntry {\n    //...\n} catch (ignoreErr) {\n    console.error(\"errors\");\n}\n```\n\n\n## When Not To Use It\n\nIf you don't want to be notified about unused variables or function arguments, you can safely turn this rule off.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1507,"column":11},"end":{"line":1507,"column":11}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"1e28569a3532f3a6745d796aa2479965","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1511 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1511,"column":1},"end":{"line":1511,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1524 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1524,"column":1},"end":{"line":1524,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"f942aa509ed117c94c1dfb69d363026d","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1540 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1540,"column":1},"end":{"line":1540,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1575 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1575,"column":1},"end":{"line":1575,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1581 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1581,"column":1},"end":{"line":1581,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1585 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1585,"column":1},"end":{"line":1585,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1602 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1602,"column":1},"end":{"line":1602,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"f942aa509ed117c94c1dfb69d363026d","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1640 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1640,"column":1},"end":{"line":1640,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1646 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1646,"column":1},"end":{"line":1646,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1652 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1652,"column":1},"end":{"line":1652,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 1656 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1656,"column":1},"end":{"line":1656,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"prefer-destructuring","description":"Use object destructuring.","content":{"body":"# Prefer destructuring from arrays and objects (prefer-destructuring)\n\nWith JavaScript ES6, a new syntax was added for creating variables from an array index or object property, called [destructuring](#further-reading).  This rule enforces usage of destructuring instead of accessing a property through a member expression.\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n```javascript\n// With `array` enabled\nvar foo = array[0];\n\n// With `object` enabled\nvar foo = object.foo;\nvar foo = object['foo'];\n```\n\nExamples of **correct** code for this rule:\n\n```javascript\n// With `array` enabled\nvar [ foo ] = array;\nvar foo = array[someIndex];\n\n// With `object` enabled\nvar { foo } = object;\nvar foo = object.bar;\n```\n\n### Options\n\nThis rule takes two sets of configuration objects; the first controls the types that the rule is applied to, and the second controls the way those objects are evaluated.\n\nThe first has two properties, `array` and `object`, which can be used to turn on or off the destructuring requirement for each of those types independently.  By default, both are `true`.\n\nThe second has a single property, `enforceForRenamedProperties`, that controls whether or not the `object` destructuring rules are applied in cases where the variable requires the property being access to be renamed.\n\nExamples of **incorrect** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar foo = object.bar;\n```\n\nExamples of **correct** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar { bar: foo } = object;\n```\n\nAn example configuration, with the defaults filled in, looks like this:\n\n```json\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\n      \"array\": true,\n      \"object\": true\n    }, {\n      \"enforceForRenamedProperties\": false\n    }]\n  }\n}\n```\n\n## When Not To Use It\n\nIf you want to be able to access array indices or object properties directly, you can either configure the rule to your tastes or disable the rule entirely.\n\nAdditionally, if you intend to access large array indices directly, like:\n\n```javascript\nvar foo = array[100];\n```\n\nThen the `array` part of this rule is not recommended, as destructuring does not match this use case very well.\n\n\n## Further Reading\n\nIf you want to learn more about destructuring, check out the links below:\n\n- [Destructuring Assignment (MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n- [Destructuring and parameter handling in ECMAScript 6 (2ality blog)](http://www.2ality.com/2015/01/es6-destructuring.html)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1731,"column":7},"end":{"line":1731,"column":7}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"b25b608f09b15aa78b653d51832bf3cb","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"prefer-destructuring","description":"Use object destructuring.","content":{"body":"# Prefer destructuring from arrays and objects (prefer-destructuring)\n\nWith JavaScript ES6, a new syntax was added for creating variables from an array index or object property, called [destructuring](#further-reading).  This rule enforces usage of destructuring instead of accessing a property through a member expression.\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n```javascript\n// With `array` enabled\nvar foo = array[0];\n\n// With `object` enabled\nvar foo = object.foo;\nvar foo = object['foo'];\n```\n\nExamples of **correct** code for this rule:\n\n```javascript\n// With `array` enabled\nvar [ foo ] = array;\nvar foo = array[someIndex];\n\n// With `object` enabled\nvar { foo } = object;\nvar foo = object.bar;\n```\n\n### Options\n\nThis rule takes two sets of configuration objects; the first controls the types that the rule is applied to, and the second controls the way those objects are evaluated.\n\nThe first has two properties, `array` and `object`, which can be used to turn on or off the destructuring requirement for each of those types independently.  By default, both are `true`.\n\nThe second has a single property, `enforceForRenamedProperties`, that controls whether or not the `object` destructuring rules are applied in cases where the variable requires the property being access to be renamed.\n\nExamples of **incorrect** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar foo = object.bar;\n```\n\nExamples of **correct** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar { bar: foo } = object;\n```\n\nAn example configuration, with the defaults filled in, looks like this:\n\n```json\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\n      \"array\": true,\n      \"object\": true\n    }, {\n      \"enforceForRenamedProperties\": false\n    }]\n  }\n}\n```\n\n## When Not To Use It\n\nIf you want to be able to access array indices or object properties directly, you can either configure the rule to your tastes or disable the rule entirely.\n\nAdditionally, if you intend to access large array indices directly, like:\n\n```javascript\nvar foo = array[100];\n```\n\nThen the `array` part of this rule is not recommended, as destructuring does not match this use case very well.\n\n\n## Further Reading\n\nIf you want to learn more about destructuring, check out the links below:\n\n- [Destructuring Assignment (MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n- [Destructuring and parameter handling in ECMAScript 6 (2ality blog)](http://www.2ality.com/2015/01/es6-destructuring.html)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1746,"column":7},"end":{"line":1746,"column":7}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"b4067d10f21e363e2c95d3cec7431e9f","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"prefer-destructuring","description":"Use object destructuring.","content":{"body":"# Prefer destructuring from arrays and objects (prefer-destructuring)\n\nWith JavaScript ES6, a new syntax was added for creating variables from an array index or object property, called [destructuring](#further-reading).  This rule enforces usage of destructuring instead of accessing a property through a member expression.\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n```javascript\n// With `array` enabled\nvar foo = array[0];\n\n// With `object` enabled\nvar foo = object.foo;\nvar foo = object['foo'];\n```\n\nExamples of **correct** code for this rule:\n\n```javascript\n// With `array` enabled\nvar [ foo ] = array;\nvar foo = array[someIndex];\n\n// With `object` enabled\nvar { foo } = object;\nvar foo = object.bar;\n```\n\n### Options\n\nThis rule takes two sets of configuration objects; the first controls the types that the rule is applied to, and the second controls the way those objects are evaluated.\n\nThe first has two properties, `array` and `object`, which can be used to turn on or off the destructuring requirement for each of those types independently.  By default, both are `true`.\n\nThe second has a single property, `enforceForRenamedProperties`, that controls whether or not the `object` destructuring rules are applied in cases where the variable requires the property being access to be renamed.\n\nExamples of **incorrect** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar foo = object.bar;\n```\n\nExamples of **correct** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar { bar: foo } = object;\n```\n\nAn example configuration, with the defaults filled in, looks like this:\n\n```json\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\n      \"array\": true,\n      \"object\": true\n    }, {\n      \"enforceForRenamedProperties\": false\n    }]\n  }\n}\n```\n\n## When Not To Use It\n\nIf you want to be able to access array indices or object properties directly, you can either configure the rule to your tastes or disable the rule entirely.\n\nAdditionally, if you intend to access large array indices directly, like:\n\n```javascript\nvar foo = array[100];\n```\n\nThen the `array` part of this rule is not recommended, as destructuring does not match this use case very well.\n\n\n## Further Reading\n\nIf you want to learn more about destructuring, check out the links below:\n\n- [Destructuring Assignment (MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n- [Destructuring and parameter handling in ECMAScript 6 (2ality blog)](http://www.2ality.com/2015/01/es6-destructuring.html)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1757,"column":9},"end":{"line":1757,"column":9}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"468d6fc7c4c28021515a638b9c4fd281","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"prefer-destructuring","description":"Use object destructuring.","content":{"body":"# Prefer destructuring from arrays and objects (prefer-destructuring)\n\nWith JavaScript ES6, a new syntax was added for creating variables from an array index or object property, called [destructuring](#further-reading).  This rule enforces usage of destructuring instead of accessing a property through a member expression.\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n```javascript\n// With `array` enabled\nvar foo = array[0];\n\n// With `object` enabled\nvar foo = object.foo;\nvar foo = object['foo'];\n```\n\nExamples of **correct** code for this rule:\n\n```javascript\n// With `array` enabled\nvar [ foo ] = array;\nvar foo = array[someIndex];\n\n// With `object` enabled\nvar { foo } = object;\nvar foo = object.bar;\n```\n\n### Options\n\nThis rule takes two sets of configuration objects; the first controls the types that the rule is applied to, and the second controls the way those objects are evaluated.\n\nThe first has two properties, `array` and `object`, which can be used to turn on or off the destructuring requirement for each of those types independently.  By default, both are `true`.\n\nThe second has a single property, `enforceForRenamedProperties`, that controls whether or not the `object` destructuring rules are applied in cases where the variable requires the property being access to be renamed.\n\nExamples of **incorrect** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar foo = object.bar;\n```\n\nExamples of **correct** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar { bar: foo } = object;\n```\n\nAn example configuration, with the defaults filled in, looks like this:\n\n```json\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\n      \"array\": true,\n      \"object\": true\n    }, {\n      \"enforceForRenamedProperties\": false\n    }]\n  }\n}\n```\n\n## When Not To Use It\n\nIf you want to be able to access array indices or object properties directly, you can either configure the rule to your tastes or disable the rule entirely.\n\nAdditionally, if you intend to access large array indices directly, like:\n\n```javascript\nvar foo = array[100];\n```\n\nThen the `array` part of this rule is not recommended, as destructuring does not match this use case very well.\n\n\n## Further Reading\n\nIf you want to learn more about destructuring, check out the links below:\n\n- [Destructuring Assignment (MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n- [Destructuring and parameter handling in ECMAScript 6 (2ality blog)](http://www.2ality.com/2015/01/es6-destructuring.html)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1762,"column":9},"end":{"line":1762,"column":9}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"17a2f658aecd57451043ee8b33fd275a","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"prefer-destructuring","description":"Use object destructuring.","content":{"body":"# Prefer destructuring from arrays and objects (prefer-destructuring)\n\nWith JavaScript ES6, a new syntax was added for creating variables from an array index or object property, called [destructuring](#further-reading).  This rule enforces usage of destructuring instead of accessing a property through a member expression.\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n```javascript\n// With `array` enabled\nvar foo = array[0];\n\n// With `object` enabled\nvar foo = object.foo;\nvar foo = object['foo'];\n```\n\nExamples of **correct** code for this rule:\n\n```javascript\n// With `array` enabled\nvar [ foo ] = array;\nvar foo = array[someIndex];\n\n// With `object` enabled\nvar { foo } = object;\nvar foo = object.bar;\n```\n\n### Options\n\nThis rule takes two sets of configuration objects; the first controls the types that the rule is applied to, and the second controls the way those objects are evaluated.\n\nThe first has two properties, `array` and `object`, which can be used to turn on or off the destructuring requirement for each of those types independently.  By default, both are `true`.\n\nThe second has a single property, `enforceForRenamedProperties`, that controls whether or not the `object` destructuring rules are applied in cases where the variable requires the property being access to be renamed.\n\nExamples of **incorrect** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar foo = object.bar;\n```\n\nExamples of **correct** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar { bar: foo } = object;\n```\n\nAn example configuration, with the defaults filled in, looks like this:\n\n```json\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\n      \"array\": true,\n      \"object\": true\n    }, {\n      \"enforceForRenamedProperties\": false\n    }]\n  }\n}\n```\n\n## When Not To Use It\n\nIf you want to be able to access array indices or object properties directly, you can either configure the rule to your tastes or disable the rule entirely.\n\nAdditionally, if you intend to access large array indices directly, like:\n\n```javascript\nvar foo = array[100];\n```\n\nThen the `array` part of this rule is not recommended, as destructuring does not match this use case very well.\n\n\n## Further Reading\n\nIf you want to learn more about destructuring, check out the links below:\n\n- [Destructuring Assignment (MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n- [Destructuring and parameter handling in ECMAScript 6 (2ality blog)](http://www.2ality.com/2015/01/es6-destructuring.html)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1820,"column":7},"end":{"line":1820,"column":7}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"ac3a96792404d86ff69237a1069164cd","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"prefer-destructuring","description":"Use object destructuring.","content":{"body":"# Prefer destructuring from arrays and objects (prefer-destructuring)\n\nWith JavaScript ES6, a new syntax was added for creating variables from an array index or object property, called [destructuring](#further-reading).  This rule enforces usage of destructuring instead of accessing a property through a member expression.\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n```javascript\n// With `array` enabled\nvar foo = array[0];\n\n// With `object` enabled\nvar foo = object.foo;\nvar foo = object['foo'];\n```\n\nExamples of **correct** code for this rule:\n\n```javascript\n// With `array` enabled\nvar [ foo ] = array;\nvar foo = array[someIndex];\n\n// With `object` enabled\nvar { foo } = object;\nvar foo = object.bar;\n```\n\n### Options\n\nThis rule takes two sets of configuration objects; the first controls the types that the rule is applied to, and the second controls the way those objects are evaluated.\n\nThe first has two properties, `array` and `object`, which can be used to turn on or off the destructuring requirement for each of those types independently.  By default, both are `true`.\n\nThe second has a single property, `enforceForRenamedProperties`, that controls whether or not the `object` destructuring rules are applied in cases where the variable requires the property being access to be renamed.\n\nExamples of **incorrect** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar foo = object.bar;\n```\n\nExamples of **correct** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar { bar: foo } = object;\n```\n\nAn example configuration, with the defaults filled in, looks like this:\n\n```json\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\n      \"array\": true,\n      \"object\": true\n    }, {\n      \"enforceForRenamedProperties\": false\n    }]\n  }\n}\n```\n\n## When Not To Use It\n\nIf you want to be able to access array indices or object properties directly, you can either configure the rule to your tastes or disable the rule entirely.\n\nAdditionally, if you intend to access large array indices directly, like:\n\n```javascript\nvar foo = array[100];\n```\n\nThen the `array` part of this rule is not recommended, as destructuring does not match this use case very well.\n\n\n## Further Reading\n\nIf you want to learn more about destructuring, check out the links below:\n\n- [Destructuring Assignment (MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n- [Destructuring and parameter handling in ECMAScript 6 (2ality blog)](http://www.2ality.com/2015/01/es6-destructuring.html)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1825,"column":7},"end":{"line":1825,"column":7}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"17a2f658aecd57451043ee8b33fd275a","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"prefer-destructuring","description":"Use object destructuring.","content":{"body":"# Prefer destructuring from arrays and objects (prefer-destructuring)\n\nWith JavaScript ES6, a new syntax was added for creating variables from an array index or object property, called [destructuring](#further-reading).  This rule enforces usage of destructuring instead of accessing a property through a member expression.\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n```javascript\n// With `array` enabled\nvar foo = array[0];\n\n// With `object` enabled\nvar foo = object.foo;\nvar foo = object['foo'];\n```\n\nExamples of **correct** code for this rule:\n\n```javascript\n// With `array` enabled\nvar [ foo ] = array;\nvar foo = array[someIndex];\n\n// With `object` enabled\nvar { foo } = object;\nvar foo = object.bar;\n```\n\n### Options\n\nThis rule takes two sets of configuration objects; the first controls the types that the rule is applied to, and the second controls the way those objects are evaluated.\n\nThe first has two properties, `array` and `object`, which can be used to turn on or off the destructuring requirement for each of those types independently.  By default, both are `true`.\n\nThe second has a single property, `enforceForRenamedProperties`, that controls whether or not the `object` destructuring rules are applied in cases where the variable requires the property being access to be renamed.\n\nExamples of **incorrect** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar foo = object.bar;\n```\n\nExamples of **correct** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar { bar: foo } = object;\n```\n\nAn example configuration, with the defaults filled in, looks like this:\n\n```json\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\n      \"array\": true,\n      \"object\": true\n    }, {\n      \"enforceForRenamedProperties\": false\n    }]\n  }\n}\n```\n\n## When Not To Use It\n\nIf you want to be able to access array indices or object properties directly, you can either configure the rule to your tastes or disable the rule entirely.\n\nAdditionally, if you intend to access large array indices directly, like:\n\n```javascript\nvar foo = array[100];\n```\n\nThen the `array` part of this rule is not recommended, as destructuring does not match this use case very well.\n\n\n## Further Reading\n\nIf you want to learn more about destructuring, check out the links below:\n\n- [Destructuring Assignment (MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n- [Destructuring and parameter handling in ECMAScript 6 (2ality blog)](http://www.2ality.com/2015/01/es6-destructuring.html)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1868,"column":9},"end":{"line":1868,"column":9}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"a5c14058be08ffb2c9d7b33b40c0ab29","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"consistent-return","description":"Expected to return a value at the end of arrow function.","content":{"body":"# require `return` statements to either always or never specify values (consistent-return)\n\nUnlike statically-typed languages which enforce that a function returns a specified type of value, JavaScript allows different code paths in a function to return different types of values.\n\nA confusing aspect of JavaScript is that a function returns `undefined` if any of the following are true:\n\n* it does not execute a `return` statement before it exits\n* it executes `return` which does not specify a value explicitly\n* it executes `return undefined`\n* it executes `return void` followed by an expression (for example, a function call)\n* it executes `return` followed by any other expression which evaluates to `undefined`\n\nIf any code paths in a function return a value explicitly but some code path do not return a value explicitly, it might be a typing mistake, especially in a large function. In the following example:\n\n* a code path through the function returns a Boolean value `true`\n* another code path does not return a value explicitly, therefore returns `undefined` implicitly\n\n```js\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n```\n\n## Rule Details\n\nThis rule requires `return` statements to either always or never specify values. This rule ignores function definitions where the name begins with an uppercase letter, because constructors (when invoked with the `new` operator) return the instantiated object implicitly if they do not return another object explicitly.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction Foo() {\n    if (!(this instanceof Foo)) {\n        return new Foo();\n    }\n\n    this.a = 0;\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"treatUndefinedAsUnspecified\": false` (default) always either specify values or return `undefined` implicitly only.\n* `\"treatUndefinedAsUnspecified\": true` always either specify values or return `undefined` explicitly or implicitly.\n\n### treatUndefinedAsUnspecified\n\nExamples of **incorrect** code for this rule with the default `{ \"treatUndefinedAsUnspecified\": false }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": false }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    return true;\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    return true;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\n## When Not To Use It\n\nIf you want to allow functions to have different `return` behavior depending on code branching, then it is safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":1970,"column":60},"end":{"line":1970,"column":60}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"ebcaef2b758a2360cd9aff59f389bf45","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 2328 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":2328,"column":1},"end":{"line":2328,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 2331 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/connectorRest.js","positions":{"begin":{"line":2331,"column":1},"end":{"line":2331,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"0d40ef5ae8a0d915fa4abb3787710a4e","severity":"minor"},{"type":"issue","categories":["Style"],"check_name":"import/no-dynamic-require","description":"Calls to require() should use string literals","content":{"body":"For more information visit Source: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/requestHandler.js","positions":{"begin":{"line":18,"column":23},"end":{"line":18,"column":23}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"65669fd39889a6f5912524cae8a44c19","severity":"minor"},{"type":"issue","categories":["Style"],"check_name":"import/no-dynamic-require","description":"Calls to require() should use string literals","content":{"body":"For more information visit Source: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/requestHandler.js","positions":{"begin":{"line":19,"column":20},"end":{"line":19,"column":20}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"65669fd39889a6f5912524cae8a44c19","severity":"minor"},{"type":"issue","categories":["Style"],"check_name":"import/no-dynamic-require","description":"Calls to require() should use string literals","content":{"body":"For more information visit Source: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/requestHandler.js","positions":{"begin":{"line":20,"column":21},"end":{"line":20,"column":21}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"65669fd39889a6f5912524cae8a44c19","severity":"minor"},{"type":"issue","categories":["Style"],"check_name":"import/no-dynamic-require","description":"Calls to require() should use string literals","content":{"body":"For more information visit Source: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/requestHandler.js","positions":{"begin":{"line":21,"column":21},"end":{"line":21,"column":21}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"65669fd39889a6f5912524cae8a44c19","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"consistent-return","description":"Expected to return a value at the end of method 'refreshProperties'.","content":{"body":"# require `return` statements to either always or never specify values (consistent-return)\n\nUnlike statically-typed languages which enforce that a function returns a specified type of value, JavaScript allows different code paths in a function to return different types of values.\n\nA confusing aspect of JavaScript is that a function returns `undefined` if any of the following are true:\n\n* it does not execute a `return` statement before it exits\n* it executes `return` which does not specify a value explicitly\n* it executes `return undefined`\n* it executes `return void` followed by an expression (for example, a function call)\n* it executes `return` followed by any other expression which evaluates to `undefined`\n\nIf any code paths in a function return a value explicitly but some code path do not return a value explicitly, it might be a typing mistake, especially in a large function. In the following example:\n\n* a code path through the function returns a Boolean value `true`\n* another code path does not return a value explicitly, therefore returns `undefined` implicitly\n\n```js\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n```\n\n## Rule Details\n\nThis rule requires `return` statements to either always or never specify values. This rule ignores function definitions where the name begins with an uppercase letter, because constructors (when invoked with the `new` operator) return the instantiated object implicitly if they do not return another object explicitly.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction Foo() {\n    if (!(this instanceof Foo)) {\n        return new Foo();\n    }\n\n    this.a = 0;\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"treatUndefinedAsUnspecified\": false` (default) always either specify values or return `undefined` implicitly only.\n* `\"treatUndefinedAsUnspecified\": true` always either specify values or return `undefined` explicitly or implicitly.\n\n### treatUndefinedAsUnspecified\n\nExamples of **incorrect** code for this rule with the default `{ \"treatUndefinedAsUnspecified\": false }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": false }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    return true;\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    return true;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\n## When Not To Use It\n\nIf you want to allow functions to have different `return` behavior depending on code branching, then it is safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/requestHandler.js","positions":{"begin":{"line":271,"column":3},"end":{"line":271,"column":3}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"492c8f0c3b26f17e2790f807448e38c0","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 373 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/requestHandler.js","positions":{"begin":{"line":373,"column":1},"end":{"line":373,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"71efe2f3e75c46965f015e9dd0edc68b","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"global-require","description":"Unexpected require().","content":{"body":"# Enforce require() on the top-level module scope (global-require)\n\nIn Node.js, module dependencies are included using the `require()` function, such as:\n\n```js\nvar fs = require(\"fs\");\n```\n\nWhile `require()` may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:\n\n```js\nfunction foo() {\n\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\nSince `require()` does a synchronous load, it can cause performance problems when used in other locations.\n\nFurther, ES6 modules mandate that `import` and `export` statements can only occur in the top level of the module's body.\n\n## Rule Details\n\nThis rule requires all calls to `require()` to be at the top level of the module, similar to ES6 `import` and `export` statements, which also can occur only at the top level.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n/*eslint-env es6*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require('fs');\n    fs.readFile(filename, callback)\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) { require('debug'); }\n\n// a require() in a switch statement is also flagged\nswitch(x) { case '1': require('1'); break; }\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire('x');\nvar y = require('y');\nvar z;\nz = require('z').initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require('fs');\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require('dev-logger') : require('logger');\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n## When Not To Use It\n\nIf you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to `require()` an optional dependency inside of a `try`/`catch`, you can disable this rule for just that dependency using the `// eslint-disable-line global-require` comment.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/requestHandler.js","positions":{"begin":{"line":731,"column":32},"end":{"line":731,"column":32}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"1fbf1e5acf198c8eb1c40e7b9f917ecf","severity":"minor"},{"type":"issue","categories":["Style"],"check_name":"import/no-dynamic-require","description":"Calls to require() should use string literals","content":{"body":"For more information visit Source: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/requestHandler.js","positions":{"begin":{"line":731,"column":32},"end":{"line":731,"column":32}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"65669fd39889a6f5912524cae8a44c19","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"global-require","description":"Unexpected require().","content":{"body":"# Enforce require() on the top-level module scope (global-require)\n\nIn Node.js, module dependencies are included using the `require()` function, such as:\n\n```js\nvar fs = require(\"fs\");\n```\n\nWhile `require()` may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:\n\n```js\nfunction foo() {\n\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\nSince `require()` does a synchronous load, it can cause performance problems when used in other locations.\n\nFurther, ES6 modules mandate that `import` and `export` statements can only occur in the top level of the module's body.\n\n## Rule Details\n\nThis rule requires all calls to `require()` to be at the top level of the module, similar to ES6 `import` and `export` statements, which also can occur only at the top level.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n/*eslint-env es6*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require('fs');\n    fs.readFile(filename, callback)\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) { require('debug'); }\n\n// a require() in a switch statement is also flagged\nswitch(x) { case '1': require('1'); break; }\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire('x');\nvar y = require('y');\nvar z;\nz = require('z').initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require('fs');\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require('dev-logger') : require('logger');\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n## When Not To Use It\n\nIf you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to `require()` an optional dependency inside of a `try`/`catch`, you can disable this rule for just that dependency using the `// eslint-disable-line global-require` comment.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/requestHandler.js","positions":{"begin":{"line":812,"column":30},"end":{"line":812,"column":30}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"1fbf1e5acf198c8eb1c40e7b9f917ecf","severity":"minor"},{"type":"issue","categories":["Style"],"check_name":"import/no-dynamic-require","description":"Calls to require() should use string literals","content":{"body":"For more information visit Source: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/requestHandler.js","positions":{"begin":{"line":812,"column":30},"end":{"line":812,"column":30}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"65669fd39889a6f5912524cae8a44c19","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 169 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/restHandler.js","positions":{"begin":{"line":169,"column":1},"end":{"line":169,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"1b879e2a4715ec7ae19d2e2d4edb30b1","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 174 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/restHandler.js","positions":{"begin":{"line":174,"column":1},"end":{"line":174,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"1b879e2a4715ec7ae19d2e2d4edb30b1","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 203 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/restHandler.js","positions":{"begin":{"line":203,"column":1},"end":{"line":203,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"1bb8b46e2413a976ac13265e3e0fced8","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 716 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/restHandler.js","positions":{"begin":{"line":716,"column":1},"end":{"line":716,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"1b879e2a4715ec7ae19d2e2d4edb30b1","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-loop-func","description":"Don't make functions within a loop.","content":{"body":"# Disallow Functions in Loops (no-loop-func)\n\nWriting functions within loops tends to result in errors due to the way the function creates a closure around the loop. For example:\n\n```js\nfor (var i = 0; i < 10; i++) {\n    funcs[i] = function() {\n        return i;\n    };\n}\n```\n\nIn this case, you would expect each function created within the loop to return a different number. In reality, each function returns 10, because that was the last value of `i` in the scope.\n\n`let` or `const` mitigate this problem.\n\n```js\n/*eslint-env es6*/\n\nfor (let i = 0; i < 10; i++) {\n    funcs[i] = function() {\n        return i;\n    };\n}\n```\n\nIn this case, each function created within the loop returns a different number as expected.\n\n\n## Rule Details\n\nThis error is raised to highlight a piece of code that may not work as you expect it to and could also indicate a misunderstanding of how the language works. Your code may run without any problems if you do not fix this error, but in some situations it could behave unexpectedly.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-loop-func: \"error\"*/\n/*eslint-env es6*/\n\nfor (var i=10; i; i--) {\n    (function() { return i; })();\n}\n\nwhile(i) {\n    var a = function() { return i; };\n    a();\n}\n\ndo {\n    function a() { return i; };\n    a();\n} while (i);\n\nlet foo = 0;\nfor (let i=10; i; i--) {\n    // Bad, function is referencing block scoped variable in the outer scope.\n    var a = function() { return foo; };\n    a();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-loop-func: \"error\"*/\n/*eslint-env es6*/\n\nvar a = function() {};\n\nfor (var i=10; i; i--) {\n    a();\n}\n\nfor (var i=10; i; i--) {\n    var a = function() {}; // OK, no references to variables in the outer scopes.\n    a();\n}\n\nfor (let i=10; i; i--) {\n    var a = function() { return i; }; // OK, all references are referring to block scoped variables in the loop.\n    a();\n}\n\nvar foo = 100;\nfor (let i=10; i; i--) {\n    var a = function() { return foo; }; // OK, all references are referring to never modified variables.\n    a();\n}\n//... no modifications of foo after this loop ...\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/throttle.js","positions":{"begin":{"line":310,"column":40},"end":{"line":310,"column":40}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"fcc1a9a16aa62868621bae8575daf8ec","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"consistent-return","description":"Expected to return a value at the end of arrow function.","content":{"body":"# require `return` statements to either always or never specify values (consistent-return)\n\nUnlike statically-typed languages which enforce that a function returns a specified type of value, JavaScript allows different code paths in a function to return different types of values.\n\nA confusing aspect of JavaScript is that a function returns `undefined` if any of the following are true:\n\n* it does not execute a `return` statement before it exits\n* it executes `return` which does not specify a value explicitly\n* it executes `return undefined`\n* it executes `return void` followed by an expression (for example, a function call)\n* it executes `return` followed by any other expression which evaluates to `undefined`\n\nIf any code paths in a function return a value explicitly but some code path do not return a value explicitly, it might be a typing mistake, especially in a large function. In the following example:\n\n* a code path through the function returns a Boolean value `true`\n* another code path does not return a value explicitly, therefore returns `undefined` implicitly\n\n```js\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n```\n\n## Rule Details\n\nThis rule requires `return` statements to either always or never specify values. This rule ignores function definitions where the name begins with an uppercase letter, because constructors (when invoked with the `new` operator) return the instantiated object implicitly if they do not return another object explicitly.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction Foo() {\n    if (!(this instanceof Foo)) {\n        return new Foo();\n    }\n\n    this.a = 0;\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"treatUndefinedAsUnspecified\": false` (default) always either specify values or return `undefined` implicitly only.\n* `\"treatUndefinedAsUnspecified\": true` always either specify values or return `undefined` explicitly or implicitly.\n\n### treatUndefinedAsUnspecified\n\nExamples of **incorrect** code for this rule with the default `{ \"treatUndefinedAsUnspecified\": false }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": false }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    return true;\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    return true;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\n## When Not To Use It\n\nIf you want to allow functions to have different `return` behavior depending on code branching, then it is safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/throttle.js","positions":{"begin":{"line":310,"column":55},"end":{"line":310,"column":55}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"693cd89f6d137c733ccb276b81b5034a","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-param-reassign","description":"Assignment to function parameter 'queueItems'.","content":{"body":"# Disallow Reassignment of Function Parameters (no-param-reassign)\n\nAssignment to variables declared as function parameters can be misleading and lead to confusing behavior, as modifying function parameters will also mutate the `arguments` object. Often, assignment to function parameters is unintended and indicative of a mistake or programmer error.\n\nThis rule can be also configured to fail when function parameters are modified. Side effects on parameters can cause counter-intuitive execution flow and make errors difficult to track down.\n\n## Rule Details\n\nThis rule aims to prevent unintended behavior caused by modification or reassignment of function parameters.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-param-reassign: \"error\"*/\n\nfunction foo(bar) {\n    bar = 13;\n}\n\nfunction foo(bar) {\n    bar++;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-param-reassign: \"error\"*/\n\nfunction foo(bar) {\n    var baz = bar;\n}\n```\n\n## Options\n\nThis rule takes one option, an object, with a boolean property `\"props\"` and an array `\"ignorePropertyModificationsFor\"`. `\"props\"` is `false` by default. If `\"props\"` is set to `true`, this rule warns against the modification of parameter properties unless they're included in `\"ignorePropertyModificationsFor\"`, which is an empty array by default.\n\n### props\n\nExamples of **correct** code for the default `{ \"props\": false }` option:\n\n```js\n/*eslint no-param-reassign: [\"error\", { \"props\": false }]*/\n\nfunction foo(bar) {\n    bar.prop = \"value\";\n}\n\nfunction foo(bar) {\n    delete bar.aaa;\n}\n\nfunction foo(bar) {\n    bar.aaa++;\n}\n```\n\nExamples of **incorrect** code for the `{ \"props\": true }` option:\n\n```js\n/*eslint no-param-reassign: [\"error\", { \"props\": true }]*/\n\nfunction foo(bar) {\n    bar.prop = \"value\";\n}\n\nfunction foo(bar) {\n    delete bar.aaa;\n}\n\nfunction foo(bar) {\n    bar.aaa++;\n}\n```\n\nExamples of **correct** code for the `{ \"props\": true }` option with `\"ignorePropertyModificationsFor\"` set:\n\n```js\n/*eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"bar\"] }]*/\n\nfunction foo(bar) {\n    bar.prop = \"value\";\n}\n\nfunction foo(bar) {\n    delete bar.aaa;\n}\n\nfunction foo(bar) {\n    bar.aaa++;\n}\n```\n\n\n## When Not To Use It\n\nIf you want to allow assignment to function parameters, then you can safely disable this rule.\n\n## Further Reading\n\n* [JavaScript: Don’t Reassign Your Function Arguments](http://spin.atomicobject.com/2011/04/10/javascript-don-t-reassign-your-function-arguments/)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/throttle.js","positions":{"begin":{"line":390,"column":9},"end":{"line":390,"column":9}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d4088f4c146a80e5025c957094b96442","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"consistent-return","description":"Expected to return a value at the end of function 'gettingCloseInterval'.","content":{"body":"# require `return` statements to either always or never specify values (consistent-return)\n\nUnlike statically-typed languages which enforce that a function returns a specified type of value, JavaScript allows different code paths in a function to return different types of values.\n\nA confusing aspect of JavaScript is that a function returns `undefined` if any of the following are true:\n\n* it does not execute a `return` statement before it exits\n* it executes `return` which does not specify a value explicitly\n* it executes `return undefined`\n* it executes `return void` followed by an expression (for example, a function call)\n* it executes `return` followed by any other expression which evaluates to `undefined`\n\nIf any code paths in a function return a value explicitly but some code path do not return a value explicitly, it might be a typing mistake, especially in a large function. In the following example:\n\n* a code path through the function returns a Boolean value `true`\n* another code path does not return a value explicitly, therefore returns `undefined` implicitly\n\n```js\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n```\n\n## Rule Details\n\nThis rule requires `return` statements to either always or never specify values. This rule ignores function definitions where the name begins with an uppercase letter, because constructors (when invoked with the `new` operator) return the instantiated object implicitly if they do not return another object explicitly.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction Foo() {\n    if (!(this instanceof Foo)) {\n        return new Foo();\n    }\n\n    this.a = 0;\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"treatUndefinedAsUnspecified\": false` (default) always either specify values or return `undefined` implicitly only.\n* `\"treatUndefinedAsUnspecified\": true` always either specify values or return `undefined` explicitly or implicitly.\n\n### treatUndefinedAsUnspecified\n\nExamples of **incorrect** code for this rule with the default `{ \"treatUndefinedAsUnspecified\": false }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": false }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    return true;\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    return true;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\n## When Not To Use It\n\nIf you want to allow functions to have different `return` behavior depending on code branching, then it is safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/throttle.js","positions":{"begin":{"line":415,"column":10},"end":{"line":415,"column":10}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"a35022391aa4cb10e9d5ea6ddf38f102","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"consistent-return","description":"Expected to return a value at the end of arrow function.","content":{"body":"# require `return` statements to either always or never specify values (consistent-return)\n\nUnlike statically-typed languages which enforce that a function returns a specified type of value, JavaScript allows different code paths in a function to return different types of values.\n\nA confusing aspect of JavaScript is that a function returns `undefined` if any of the following are true:\n\n* it does not execute a `return` statement before it exits\n* it executes `return` which does not specify a value explicitly\n* it executes `return undefined`\n* it executes `return void` followed by an expression (for example, a function call)\n* it executes `return` followed by any other expression which evaluates to `undefined`\n\nIf any code paths in a function return a value explicitly but some code path do not return a value explicitly, it might be a typing mistake, especially in a large function. In the following example:\n\n* a code path through the function returns a Boolean value `true`\n* another code path does not return a value explicitly, therefore returns `undefined` implicitly\n\n```js\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n```\n\n## Rule Details\n\nThis rule requires `return` statements to either always or never specify values. This rule ignores function definitions where the name begins with an uppercase letter, because constructors (when invoked with the `new` operator) return the instantiated object implicitly if they do not return another object explicitly.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction Foo() {\n    if (!(this instanceof Foo)) {\n        return new Foo();\n    }\n\n    this.a = 0;\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"treatUndefinedAsUnspecified\": false` (default) always either specify values or return `undefined` implicitly only.\n* `\"treatUndefinedAsUnspecified\": true` always either specify values or return `undefined` explicitly or implicitly.\n\n### treatUndefinedAsUnspecified\n\nExamples of **incorrect** code for this rule with the default `{ \"treatUndefinedAsUnspecified\": false }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": false }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    return true;\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    return true;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\n## When Not To Use It\n\nIf you want to allow functions to have different `return` behavior depending on code branching, then it is safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/throttle.js","positions":{"begin":{"line":431,"column":65},"end":{"line":431,"column":65}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"693cd89f6d137c733ccb276b81b5034a","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"consistent-return","description":"Expected to return a value at the end of method 'verifyReady'.","content":{"body":"# require `return` statements to either always or never specify values (consistent-return)\n\nUnlike statically-typed languages which enforce that a function returns a specified type of value, JavaScript allows different code paths in a function to return different types of values.\n\nA confusing aspect of JavaScript is that a function returns `undefined` if any of the following are true:\n\n* it does not execute a `return` statement before it exits\n* it executes `return` which does not specify a value explicitly\n* it executes `return undefined`\n* it executes `return void` followed by an expression (for example, a function call)\n* it executes `return` followed by any other expression which evaluates to `undefined`\n\nIf any code paths in a function return a value explicitly but some code path do not return a value explicitly, it might be a typing mistake, especially in a large function. In the following example:\n\n* a code path through the function returns a Boolean value `true`\n* another code path does not return a value explicitly, therefore returns `undefined` implicitly\n\n```js\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n```\n\n## Rule Details\n\nThis rule requires `return` statements to either always or never specify values. This rule ignores function definitions where the name begins with an uppercase letter, because constructors (when invoked with the `new` operator) return the instantiated object implicitly if they do not return another object explicitly.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction Foo() {\n    if (!(this instanceof Foo)) {\n        return new Foo();\n    }\n\n    this.a = 0;\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"treatUndefinedAsUnspecified\": false` (default) always either specify values or return `undefined` implicitly only.\n* `\"treatUndefinedAsUnspecified\": true` always either specify values or return `undefined` explicitly or implicitly.\n\n### treatUndefinedAsUnspecified\n\nExamples of **incorrect** code for this rule with the default `{ \"treatUndefinedAsUnspecified\": false }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": false }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    return true;\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    return true;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\n## When Not To Use It\n\nIf you want to allow functions to have different `return` behavior depending on code branching, then it is safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/throttle.js","positions":{"begin":{"line":578,"column":3},"end":{"line":578,"column":3}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"9df10b0caac5d8fa4cb3b85811be5089","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"consistent-return","description":"Expected to return a value at the end of arrow function.","content":{"body":"# require `return` statements to either always or never specify values (consistent-return)\n\nUnlike statically-typed languages which enforce that a function returns a specified type of value, JavaScript allows different code paths in a function to return different types of values.\n\nA confusing aspect of JavaScript is that a function returns `undefined` if any of the following are true:\n\n* it does not execute a `return` statement before it exits\n* it executes `return` which does not specify a value explicitly\n* it executes `return undefined`\n* it executes `return void` followed by an expression (for example, a function call)\n* it executes `return` followed by any other expression which evaluates to `undefined`\n\nIf any code paths in a function return a value explicitly but some code path do not return a value explicitly, it might be a typing mistake, especially in a large function. In the following example:\n\n* a code path through the function returns a Boolean value `true`\n* another code path does not return a value explicitly, therefore returns `undefined` implicitly\n\n```js\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n```\n\n## Rule Details\n\nThis rule requires `return` statements to either always or never specify values. This rule ignores function definitions where the name begins with an uppercase letter, because constructors (when invoked with the `new` operator) return the instantiated object implicitly if they do not return another object explicitly.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction Foo() {\n    if (!(this instanceof Foo)) {\n        return new Foo();\n    }\n\n    this.a = 0;\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"treatUndefinedAsUnspecified\": false` (default) always either specify values or return `undefined` implicitly only.\n* `\"treatUndefinedAsUnspecified\": true` always either specify values or return `undefined` explicitly or implicitly.\n\n### treatUndefinedAsUnspecified\n\nExamples of **incorrect** code for this rule with the default `{ \"treatUndefinedAsUnspecified\": false }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": false }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    return true;\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    return true;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\n## When Not To Use It\n\nIf you want to allow functions to have different `return` behavior depending on code branching, then it is safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/throttle.js","positions":{"begin":{"line":615,"column":62},"end":{"line":615,"column":62}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"693cd89f6d137c733ccb276b81b5034a","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"consistent-return","description":"Expected to return a value at the end of arrow function.","content":{"body":"# require `return` statements to either always or never specify values (consistent-return)\n\nUnlike statically-typed languages which enforce that a function returns a specified type of value, JavaScript allows different code paths in a function to return different types of values.\n\nA confusing aspect of JavaScript is that a function returns `undefined` if any of the following are true:\n\n* it does not execute a `return` statement before it exits\n* it executes `return` which does not specify a value explicitly\n* it executes `return undefined`\n* it executes `return void` followed by an expression (for example, a function call)\n* it executes `return` followed by any other expression which evaluates to `undefined`\n\nIf any code paths in a function return a value explicitly but some code path do not return a value explicitly, it might be a typing mistake, especially in a large function. In the following example:\n\n* a code path through the function returns a Boolean value `true`\n* another code path does not return a value explicitly, therefore returns `undefined` implicitly\n\n```js\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n```\n\n## Rule Details\n\nThis rule requires `return` statements to either always or never specify values. This rule ignores function definitions where the name begins with an uppercase letter, because constructors (when invoked with the `new` operator) return the instantiated object implicitly if they do not return another object explicitly.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction Foo() {\n    if (!(this instanceof Foo)) {\n        return new Foo();\n    }\n\n    this.a = 0;\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"treatUndefinedAsUnspecified\": false` (default) always either specify values or return `undefined` implicitly only.\n* `\"treatUndefinedAsUnspecified\": true` always either specify values or return `undefined` explicitly or implicitly.\n\n### treatUndefinedAsUnspecified\n\nExamples of **incorrect** code for this rule with the default `{ \"treatUndefinedAsUnspecified\": false }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": false }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    return true;\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    return true;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\n## When Not To Use It\n\nIf you want to allow functions to have different `return` behavior depending on code branching, then it is safe to disable this rule.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/throttle.js","positions":{"begin":{"line":841,"column":91},"end":{"line":841,"column":91}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"693cd89f6d137c733ccb276b81b5034a","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 853 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/throttle.js","positions":{"begin":{"line":853,"column":1},"end":{"line":853,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"8cee957f8050f4c6967e8275cf8c3d2b","severity":"minor"},{"type":"issue","categories":["Compatibility"],"check_name":"no-use-before-define","description":"'buildObject' was used before it was defined.","content":{"body":"# Disallow Early Use (no-use-before-define)\n\nIn JavaScript, prior to ES6, variable and function declarations are hoisted to the top of a scope, so it's possible to use identifiers before their formal declarations in code. This can be confusing and some believe it is best to always declare variables and functions before using them.\n\nIn ES6, block-level bindings (`let` and `const`) introduce a \"temporal dead zone\" where a `ReferenceError` will be thrown with any attempt to access the variable before its declaration.\n\n## Rule Details\n\nThis rule will warn when it encounters a reference to an identifier that has not yet been declared.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-use-before-define: \"error\"*/\n/*eslint-env es6*/\n\nalert(a);\nvar a = 10;\n\nf();\nfunction f() {}\n\nfunction g() {\n    return b;\n}\nvar b = 1;\n\n// With blockBindings: true\n{\n    alert(c);\n    let c = 1;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-use-before-define: \"error\"*/\n/*eslint-env es6*/\n\nvar a;\na = 10;\nalert(a);\n\nfunction f() {}\nf(1);\n\nvar b = 1;\nfunction g() {\n    return b;\n}\n\n// With blockBindings: true\n{\n    let C;\n    c++;\n}\n```\n\n## Options\n\n```json\n{\n    \"no-use-before-define\": [\"error\", { \"functions\": true, \"classes\": true }]\n}\n```\n\n* `functions` (`boolean`) -\n  The flag which shows whether or not this rule checks function declarations.\n  If this is `true`, this rule warns every reference to a function before the function declaration.\n  Otherwise, ignores those references.\n  Function declarations are hoisted, so it's safe.\n  Default is `true`.\n* `classes` (`boolean`) -\n  The flag which shows whether or not this rule checks class declarations of upper scopes.\n  If this is `true`, this rule warns every reference to a class before the class declaration.\n  Otherwise, ignores those references if the declaration is in upper function scopes.\n  Class declarations are not hoisted, so it might be danger.\n  Default is `true`.\n* `variables` (`boolean`) -\n  This flag determines whether or not the rule checks variable declarations in upper scopes.\n  If this is `true`, the rule warns every reference to a variable before the variable declaration.\n  Otherwise, the rule ignores a reference if the declaration is in an upper scope, while still reporting the reference if it's in the same scope as the declaration.\n  Default is `true`.\n\nThis rule accepts `\"nofunc\"` string as an option.\n`\"nofunc\"` is the same as `{ \"functions\": false, \"classes\": true }`.\n\n### functions\n\nExamples of **correct** code for the `{ \"functions\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"functions\": false }]*/\n\nf();\nfunction f() {}\n```\n\n### classes\n\nExamples of **incorrect** code for the `{ \"classes\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"classes\": false }]*/\n/*eslint-env es6*/\n\nnew A();\nclass A {\n}\n```\n\nExamples of **correct** code for the `{ \"classes\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"classes\": false }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    return new A();\n}\n\nclass A {\n}\n```\n\n### variables\n\nExamples of **incorrect** code for the `{ \"variables\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"variables\": false }]*/\n\nconsole.log(foo);\nvar foo = 1;\n```\n\nExamples of **correct** code for the `{ \"variables\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"variables\": false }]*/\n\nfunction baz() {\n    console.log(foo);\n}\n\nvar foo = 1;\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/translatorUtil.js","positions":{"begin":{"line":154,"column":19},"end":{"line":154,"column":19}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"2cba31cf8542d62e426d090a7f879e0a","severity":"minor"},{"type":"issue","categories":["Compatibility"],"check_name":"no-use-before-define","description":"'extractObject' was used before it was defined.","content":{"body":"# Disallow Early Use (no-use-before-define)\n\nIn JavaScript, prior to ES6, variable and function declarations are hoisted to the top of a scope, so it's possible to use identifiers before their formal declarations in code. This can be confusing and some believe it is best to always declare variables and functions before using them.\n\nIn ES6, block-level bindings (`let` and `const`) introduce a \"temporal dead zone\" where a `ReferenceError` will be thrown with any attempt to access the variable before its declaration.\n\n## Rule Details\n\nThis rule will warn when it encounters a reference to an identifier that has not yet been declared.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-use-before-define: \"error\"*/\n/*eslint-env es6*/\n\nalert(a);\nvar a = 10;\n\nf();\nfunction f() {}\n\nfunction g() {\n    return b;\n}\nvar b = 1;\n\n// With blockBindings: true\n{\n    alert(c);\n    let c = 1;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-use-before-define: \"error\"*/\n/*eslint-env es6*/\n\nvar a;\na = 10;\nalert(a);\n\nfunction f() {}\nf(1);\n\nvar b = 1;\nfunction g() {\n    return b;\n}\n\n// With blockBindings: true\n{\n    let C;\n    c++;\n}\n```\n\n## Options\n\n```json\n{\n    \"no-use-before-define\": [\"error\", { \"functions\": true, \"classes\": true }]\n}\n```\n\n* `functions` (`boolean`) -\n  The flag which shows whether or not this rule checks function declarations.\n  If this is `true`, this rule warns every reference to a function before the function declaration.\n  Otherwise, ignores those references.\n  Function declarations are hoisted, so it's safe.\n  Default is `true`.\n* `classes` (`boolean`) -\n  The flag which shows whether or not this rule checks class declarations of upper scopes.\n  If this is `true`, this rule warns every reference to a class before the class declaration.\n  Otherwise, ignores those references if the declaration is in upper function scopes.\n  Class declarations are not hoisted, so it might be danger.\n  Default is `true`.\n* `variables` (`boolean`) -\n  This flag determines whether or not the rule checks variable declarations in upper scopes.\n  If this is `true`, the rule warns every reference to a variable before the variable declaration.\n  Otherwise, the rule ignores a reference if the declaration is in an upper scope, while still reporting the reference if it's in the same scope as the declaration.\n  Default is `true`.\n\nThis rule accepts `\"nofunc\"` string as an option.\n`\"nofunc\"` is the same as `{ \"functions\": false, \"classes\": true }`.\n\n### functions\n\nExamples of **correct** code for the `{ \"functions\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"functions\": false }]*/\n\nf();\nfunction f() {}\n```\n\n### classes\n\nExamples of **incorrect** code for the `{ \"classes\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"classes\": false }]*/\n/*eslint-env es6*/\n\nnew A();\nclass A {\n}\n```\n\nExamples of **correct** code for the `{ \"classes\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"classes\": false }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    return new A();\n}\n\nclass A {\n}\n```\n\n### variables\n\nExamples of **incorrect** code for the `{ \"variables\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"variables\": false }]*/\n\nconsole.log(foo);\nvar foo = 1;\n```\n\nExamples of **correct** code for the `{ \"variables\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"variables\": false }]*/\n\nfunction baz() {\n    console.log(foo);\n}\n\nvar foo = 1;\n```\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/translatorUtil.js","positions":{"begin":{"line":156,"column":19},"end":{"line":156,"column":19}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"e598dd0e42576283d9b74566f1a617c8","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 856 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/translatorUtil.js","positions":{"begin":{"line":856,"column":1},"end":{"line":856,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"3a0af67e541bb3cd6080aa332bfee39d","severity":"minor"},{"type":"issue","categories":["Complexity"],"check_name":"max-len","description":"Line 859 exceeds the maximum line length of 100.","content":{"body":"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", 80, 4]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `{ \"ignorePattern\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(/\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"lib/translatorUtil.js","positions":{"begin":{"line":859,"column":1},"end":{"line":859,"column":1}}},"remediation_points":1000000,"engine_name":"eslint","fingerprint":"3a0af67e541bb3cd6080aa332bfee39d","severity":"minor"}]
